[{"title":"如何利用Hexo、GitHub pages从零开始创建个人博客","date":"2017-04-19T01:19:42.000Z","path":"2017/04/19/howCreateMyBlog/","text":"从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不多说了，详情如下： 一、系统环境配置：要想利用Hexo、GitHub搭建个人博客，首先要安装Node.js、git： 1、Node.js安装：下载Node.js 或者通过如下命令安装：123456789101112131415161718192021222324 brew install node #最新版的node.js的包中已经集成了npm包管理工具 ``` #### 通过如下命令查看是否安装成功： ``` node -v npm -v``` #### 2、Git安装及配置：[下载Git](https://git-scm.com/download/) #### 或者通过如下命令安装： ``` brew install git #Mac电脑使用brew安装 sudo apt-get install git #Ubuntu系统使用这条命令安装``` 配置详见另外一篇博客： [git安装与配置](https://git-scm.com/download/) #### 3、Hexo安装： $ npm install hexo -g #-g表示全局安装, npm默认为当前项目安装12#### 如遇错误，请使用一下安装： $ npm install hexo –no-optional12#### 验证是否成功安装： $ hexo -v12目前我用到的环境如下 ，出现类似如下环境说明hexo安装成功 hexo-cli: 1.0.2os: Darwin 16.4.0 darwin x64http_parser: 2.7.0node: 6.10.0v8: 5.1.281.93uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 58.2modules: 48openssl: 1.0.2k 12#### 创建博客的根目录并切换到更目录下： $ mkdir myblog$ cd myblog12#### 初始化myblog文件夹使其成为Hexo博客： $ hexo init12#### 自动根据当前目录下文件,生成静态网页： $ hexo generate12#### 运行本地服务： $ hexo server12#### 有必要提下Hexo常用的几个命令： $ hexo new “postName” #新建文章$ hexo new page “pageName” #新建页面$ hexo generate (或者hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹$ hexo server (或者hexo s) 启动本地web服务，用于博客的预览$ hexo deploy (或者hexo d) 部署播客到远端（比如github, coding等平台） 12#### 常用简写： $ hexo n == hexo new$ hexo g == hexo generate$ hexo s == hexo server$ hexo d == hexo deploy1#### 常用组合： $ hexo d -g #生成部署$ hexo s -g #生成预览1234567通过hexo g生成静态文件和hexo s启动本地web服务后，现在我们打开&lt;http://localhost:4000/&gt; 就可以看到一篇内置的blog了。看到后是不是感觉很有成就感？反正我是这么认为的。#### 二、Hexo主题设置默认的主题是landscape，这里以主题yilia为例进行说明。[Hexo中文官网：下载主题、配置详解](https://hexo.io/zh-cn/docs/)##### 安装主题 $ hexo clean$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia12##### 修改主题 修改myblog目录下的_config.yml配置文件中的theme属性，将其设置为yilia。并按照主题说明进行相关的配置，这点很重要，否则修改后的主题样式会有变化例如：git clone https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题就需要在_config.yml配置文件添加如下内容： search插件基于 https://github.com/PaicHyperionDev/hexo-generator-search使用说明请参考该reposearch: path: search.xml field: all12#### 更新主题 $ hexo g # 生成$ hexo s # 启动本地web服务器12345678910111213141516171819202122232425#### 三、GitHub Pages配置#### 1、注册、登录GitHub github官网：&lt;https://github.com/&gt;![你值得拥有](https://ww4.sinaimg.cn/large/006tKfTcgy1fch0a9kz7aj31kw0z7npd.jpg)#### 2、创建项目仓库 注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。![你值得拥有](http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan20163281.png) #### 3、填写项目名在Repository name中填写：**Github账号名.github.io 必须这样填，否则会出错 例如我的账号为:allen,那么就必须填allen.github.io**![你值得拥有](http://www.pchou.info/assets/img/build-github-blog-page-02-img0.png)#### 4、设置GitHub pages打开settings，有一个Github Pages 的设置，点击 source 中的本来的 None ，使其变成 master 分支，也就是作为部署github pages 的分支，然后点击 save。![你值得拥有](http://images2015.cnblogs.com/blog/903320/201701/903320-20170115212404385-1979000093.png)#### 5、查看网址页面刷新之后，再看 github pages 设置框处，多了一行网址，就是你的 github pages 的网址了，点击进去就进入属于你自己的博客网址了。![你值得拥有](http://images2015.cnblogs.com/blog/903320/201701/903320-20170115213630338-44375750.png)### 四、部署到GitHub pages#### 1、修改_config.yml千万要注意冒号：后边要留有空格 基本设置 title: allensubtitle: welcome to allen blogdescription:author: John Doelanguage: zh-CN #语言timezone: #时区 URLIf your site is put in a subdirectory, set url as ‘http://yoursite.com/child‘ and root as ‘/child/‘url: http://suxianglun.github.io #用于绑定域名, 其他的不需要配置，即为GitHub pages生成的那个网址root: /permalink: :year/:month/:day/:title/permalink_defaults: ExtensionsPlugins: https://hexo.io/plugins/Themes: https://hexo.io/themes/theme: hexo-theme-landfarz #主题设置 DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy: #部署, 发布在 GitHub 上面 type: git repo: git@github.com:suxianglun/suxianglun.github.io.git #GitHub 项目仓库 branch: master1#### 2、部署到GitHub 上 $ hexo clean #清除$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d -g1$ hexo d 之后如果出现ERROR Deployer not found: Git,请键入如下命令 $ npm install hexo-deployer-git –save123456部署之后去查看GitHub pages那个网址http://suxianglun.github.io，有可能会出现: Your site is having problems building: unable to build page. Please try again later. 或者Your page is having problems building: page build failed同时也会收到github发来的page build failure的邮件，但是邮件中显示的错误信息和settings页面上的一样, 就这句话, 什么都没有, 没有任何错误提示.我就卡在这一天，后来用了好长时间来解决了。我分析的主要原因如下： 1、Hexo未进行构建html,即未执行hexo g,这个过程需要一段时间，构建好html后myblog根目录下完整目录应该如下： README.md db.json package.json scaffolds themes_config.yml node_modules public source ```2、Hexo 配置不正确，请严格按照要求进行配置 注意事项：markdown标题标准写法写法需要在”#”和后面字符之间加一个空格如果不加空格 有些引擎就解析不了 另外说一下我的个人博客地址 https://suxianglun.github.io/ 欢迎来骚扰。","tags":[]},{"title":"Android studio下JNI开发","date":"2017-04-05T03:11:48.000Z","path":"2017/04/05/Android studio下JNI和NDK开发/","text":"1.下载Ndk并配置点菜单栏的File-&gt;ProjectStructure…-&gt;在打开的窗口中左侧选中SDKLocation-&gt;在右侧Android NDK Location中填入NDK目录所在路径，如下图所示： 2. 新建项目JniDemo1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:public class JniUtil { static { System.loadLibrary(&quot;JniUtil&quot;); } public static native int getJniAdd(int a, int b); } 2. 生成Java文件中native方法相对应的jin层c代码接口在AS界面的Terminal窗口中执行命令：cd app/src/main/java定位至java文件夹，然后再执行命令：javah -jni com.richsoft.jnidemo.JniUtil注意”com.richsoft.jnidemo”是JniUtil所在的包名。此时在app/src/main/java路径下生成了一个.h文件，如图： 3.新建jni文件夹app-&gt;new-&gt;Floder-&gt;JNI Folder,如下图： 点击之后弹出选择框： 点击finish之后，main文件夹下生成jni文件夹，如下图： 4.实现项目中声明的Native方法在jni目录下创建JniUtil.c文件,然后将com_richsoft_jnidemo_JniUtil.h中的方法拷贝至JniUtil.c中，并实现这个方法，如下代码： #include&lt;jni.h&gt; JNIEXPORT jint JNICALL Java_com_richsoft_jnidemo_JniUtil_getJniAdd (JNIEnv *env, jclass cls, jint a, jint b) { return a + b; } 3.编译.so文件1.gradle内添加代码：在gradle.properties文件末尾添加上“android.useDeprecatedNdk=true”然后在app文件下build.grade－&gt;defaultConfig括号内添加如下代码： ndk { moduleName &quot;JniUtil&quot; //生成的so名字 abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; ,&quot;x86&quot;//输出指定三种abi体系结构下的so库，目前可有可无。 } 2.build 项目点击Build下的Make Project,成功之后打开app-&gt;intermediates-&gt;ndk-&gt;debug发现了四个文件夹,如下图： 到此，生成.so文件的过程结束。在src\\main下新建jniLibs文件夹，将上面的四个文件夹拷贝至jniLibs文件夹下，如图： 将jni文件夹和.h文件删除，如下图： 最后咱们试试生成的.so文件能不能用，贴下MainActivity代码： public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView tv = (TextView) findViewById(R.id.tv); tv.setText(&quot;java调用C语言实现的加法运算:2+1000=&quot; + JniUtil.getJniAdd(2, 10000)); } } 运行下程序，结果如下：","tags":[]}]