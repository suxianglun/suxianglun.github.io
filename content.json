[{"title":"《Python核心编程》学习笔记01（Python起步）","date":"2017-05-04T05:52:13.000Z","path":"2017/05/04/python核心编程学习笔记01（Python起步）/","text":"1.程序输出print语句及“HelloWorld!”12345&gt;&gt;&gt; myString = &apos;Hello World!&apos; &gt;&gt;&gt; print myString &apos;Hello World!&apos;&gt;&gt;&gt; myString &apos;Hello World!&apos; 1.1._ 和 %在print中的使用下划线(_)在解释器中有特别的含义，表示最后一个表达式的值。所以上面的代码执行之后， 下划线变量会包含字符串: 12&gt;&gt;&gt; _Hello World! Python的print语句，与字符串格式运算符( %)结合使用，可实现字符串替换功能。%s 表示由一个字符串来替换，而%d 表示由一个整数来替换，另外一个很常用的就是%f。它表示由一个浮点数来替换。 12&gt;&gt;&gt; print ‘%s is number %d !’ % (&apos;python&apos;, 1)python is number 1! 2.程序输入和内建函数raw_input()从用户那里得到数据输入的最容易的方法是使用 raw_input()内建函数。它读取标准输入，并将读取到的数据赋值给指定的变量。 12&gt;&gt;&gt; user=raw_input(&apos;henter your name: &apos;)enter your name suxianglun 内建函数 int()将数值字符串转换成整数值，这样才可以对它进行数学运算 1234&gt;&gt;&gt; num = raw_input(&apos;Now enter a number: &apos;)Now enter a number: 1024 &gt;&gt;&gt; print &apos;Doubling your number: %d&apos; % (int(num) * 2) Doubling your number: 2048 3.使用help()函数获取帮助信息help()在交互式解释器中获取帮助信息,在学习 Python 的过程中，如果需要得到一个生疏函数的帮助，只需要对它调用内建函数help()。通过用函数名作为 help()的参数就能得到相应的帮助信息,查看结束退出使用 ：wq进行退出 123&gt;&gt;&gt; help(raw_input)Help on built-in function raw_input in module __builtin__:raw_input(...) raw_input([prompt]) -&gt; string 4. 列表解析表示可以在一行中使用for循环将所得到的的值放在列表中 12&gt;&gt;&gt; squared = [x ** 2 for x in range(4)] &gt;&gt;&gt; for i in squared: ... print i 0 1 4 9 列表解析可以做更复杂的事情 1234567&gt;&gt;&gt;squared = [x ** 2 for x in range(8) if not x%2]&gt;&gt;&gt;for i in squared...print i041636 5.实用的函数 函数 描述 dir([obj]) 显示对象的属性，如果没有提供参数， 则显示全局变量的名字 help([obj]) 以一种整齐美观的形式 显示对象的文档字符串， 如果没有提供任何参 数， 则会进入交互式帮助。 int(obj) 将一个对象转换为整数 len(obj) 返回对象的长度 open(fn, mode) 以 mode(‘r’ = 读， ‘w’= 写)方式打开一个文件名为 fn 的文件 range([[start,]stop[,step]) 返回一个整数列表。起始值为 start, 结束值为 stop - 1; start 默认值为 0， step默认值为1。 raw_input(str) 等待用户输入一个字符串， 可以提供一个可选的参数 str 用作提示信 息。 str(obj) 将一个对象转换为字符串 type(obj) 返回对象的类型(返回值本身是一个 type 对象!)","tags":[]},{"title":"URI和URL含义及其理解","date":"2017-04-28T08:14:03.000Z","path":"2017/04/28/URL和URI含义及理解/","text":"1、URI和URL含义：在理解URL之前先来看一下什么是URI 1.1 什么是URI？简单点说：URI就是通用资源标志符，不理解是吧，我第一次听说也是不理解。进一步说：网络上的一些资源（文档、图片、音频、视频、程序等）都是有一些通用资源标识（Universal Resource Identifier， URI）进行定位的。也就是说如果你想要在网络上找到特定的这些资源，只需知道他们的URI，就可以进行定位，从而找到他们。 通常情况下URI由三部分组成： 1、访问资源的命名机制2、存放资源的主机名3、资源自身的名称，由路径表示 如下面的URI：http://www.jianshu.com/writer#/notebooks/9212154http://可以这样解读： 1、以http机制访问资源2、存在以www.jianshu.com为名的主机上3、资源路径为notebooks/9212154http:// 1.2什么是URLURL是URI的子集，它是Uniform Resource Locator的缩写，统一资源定位符”。采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL的格式由三部分组成： ①第一部分是协议(或称为服务方式)。②第二部分是存有该资源的主机IP地址(有时也包括端口号)。③第三部分是主机资源的具体地址，如目录和文件名等。第一部分和第二部分用“://”符号隔开，第二部分和第三部分用“/”符号隔开。第一部分和第二部分是不可缺少的，第三部分有时可以省略。 2、URL和URI的区别 URI的定义是：统一资源标识符；URL的定义是：统一资源定位符。URI属于URL更低层次的抽象，一种字符串文本标准。换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。URI属于URL更低层次的抽象，一种字符串文本标准。换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。","tags":[]},{"title":"如何利用Hexo、GitHub pages从零开始创建个人博客","date":"2017-04-19T01:19:42.000Z","path":"2017/04/19/howCreateMyBlog/","text":"从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不多说了，详情如下： 一、系统环境配置：要想利用Hexo、GitHub搭建个人博客，首先要安装Node.js、git： 1、Node.js安装：下载Node.js 或者通过如下命令安装： brew install node #最新版的node.js的包中已经集成了npm包管理工具 通过如下命令查看是否安装成功： node -vnpm -v 2、Git安装及配置：下载Git 或者通过如下命令安装： brew install git #Mac电脑使用brew安装sudo apt-get install git #Ubuntu系统使用这条命令安装 配置详见另外一篇博客： git安装与配置 3、Hexo安装： $ npm install hexo -g #-g表示全局安装, npm默认为当前项目安装 如遇错误，请使用一下安装： $ npm install hexo –no-optional 验证是否成功安装： $ hexo -v 目前我用到的环境如下 ，出现类似如下环境说明hexo安装成功 hexo-cli: 1.0.2os: Darwin 16.4.0 darwin x64http_parser: 2.7.0node: 6.10.0v8: 5.1.281.93uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 58.2modules: 48openssl: 1.0.2k 创建博客的根目录并切换到更目录下： $ mkdir myblog$ cd myblog 初始化myblog文件夹使其成为Hexo博客： $ hexo init 自动根据当前目录下文件,生成静态网页： $ hexo generate 运行本地服务： $ hexo server 有必要提下Hexo常用的几个命令： $ hexo new “postName” #新建文章$ hexo new page “pageName” #新建页面$ hexo generate (或者hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹$ hexo server (或者hexo s) 启动本地web服务，用于博客的预览$ hexo deploy (或者hexo d) 部署播客到远端（比如github, coding等平台） 常用简写： $ hexo n == hexo new$ hexo g == hexo generate$ hexo s == hexo server$ hexo d == hexo deploy 常用组合： $ hexo d -g #生成部署$ hexo s -g #生成预览 通过hexo g生成静态文件和hexo s启动本地web服务后，现在我们打开http://localhost:4000/ 就可以看到一篇内置的blog了。看到后是不是感觉很有成就感？反正我是这么认为的。 二、Hexo主题设置默认的主题是landscape，这里以主题yilia为例进行说明。Hexo中文官网：下载主题、配置详解 安装主题 $ hexo clean$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 修改主题 修改myblog目录下的_config.yml配置文件中的theme属性，将其设置为yilia。并按照主题说明进行相关的配置，这点很重要，否则修改后的主题样式会有变化例如：git clone https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题就需要在_config.yml配置文件添加如下内容： search插件基于 https://github.com/PaicHyperionDev/hexo-&gt;generator-search使用说明请参考该reposearch: path: search.xml field: all 更新主题 $ hexo g # 生成$ hexo s # 启动本地web服务器 三、GitHub Pages配置1、注册、登录GitHubgithub官网：https://github.com/ 你值得拥有 2、创建项目仓库注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。 你值得拥有 3、填写项目名在Repository name中填写：Github账号名.github.io 必须这样填，否则会出错 例如我的账号为:allen,那么就必须填allen.github.io 你值得拥有 4、设置GitHub pages打开settings，有一个Github Pages 的设置，点击 source 中的本来的 None ，使其变成 master 分支，也就是作为部署github pages 的分支，然后点击 save。 你值得拥有 5、查看网址页面刷新之后，再看 github pages 设置框处，多了一行网址，就是你的 github pages 的网址了，点击进去就进入属于你自己的博客网址了。 你值得拥有 四、部署到GitHub pages1、修改_config.yml千万要注意冒号：后边要留有空格 基本设置 title: allensubtitle: welcome to allen blogdescription:author: John Doelanguage: zh-CN #语言timezone: #时区 URLIf your site is put in a subdirectory, set url as ‘http://yoursite.com/child‘ and root as ‘/child/‘ url: http://suxianglun.github.io #用于绑定域名, 其他的不需要配置，即为GitHub pages生成的那个网址root: /permalink: :year/:month/:day/:title/permalink_defaults: ExtensionsPlugins: https://hexo.io/plugins/Themes: https://hexo.io/themes/theme: hexo-theme-landfarz #主题设置 DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy: #部署, 发布在 GitHub 上面 type: git repo: git@github.com:suxianglun/suxianglun.github.io.git #GitHub 项目仓库 branch: master 2、部署到GitHub 上 $ hexo clean #清除$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d -g $ hexo d 之后如果出现ERROR Deployer not found: Git,请键入如下命令 $ npm install hexo-deployer-git –save 部署之后去查看GitHub pages那个网址http://suxianglun.github.io，有可能会出现:Your site is having problems building: unable to build page. Please try again later. 或者Your page is having problems building: page build failed同时也会收到github发来的page build failure的邮件，但是邮件中显示的错误信息和settings页面上的一样, 就这句话, 什么都没有, 没有任何错误提示.我就卡在这一天，后来用了好长时间来解决了。我分析的主要原因如下：1、Hexo未进行构建html,即未执行hexo g,这个过程需要一段时间，构建好html后myblog根目录下完整目录应该如下： README.md db.json package.json scaffolds themes_config.yml node_modules public source 2、Hexo 配置不正确，请严格按照要求进行配置 注意事项：markdown标题标准写法写法需要在”#”和后面字符之间加一个空格如果不加空格 有些引擎就解析不了 另外说一下我的个人博客地址 https://suxianglun.github.io/ 欢迎来骚扰。","tags":[]},{"title":"Android studio下JNI开发","date":"2017-04-05T03:11:48.000Z","path":"2017/04/05/Android studio下JNI和NDK开发/","text":"1.下载Ndk并配置点菜单栏的File-&gt;ProjectStructure…-&gt;在打开的窗口中左侧选中SDKLocation-&gt;在右侧Android NDK Location中填入NDK目录所在路径，如下图所示： 2. 新建项目JniDemo1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:public class JniUtil { static { System.loadLibrary(&quot;JniUtil&quot;); } public static native int getJniAdd(int a, int b); } 2. 生成Java文件中native方法相对应的jin层c代码接口在AS界面的Terminal窗口中执行命令：cd app/src/main/java定位至java文件夹，然后再执行命令：javah -jni com.richsoft.jnidemo.JniUtil注意”com.richsoft.jnidemo”是JniUtil所在的包名。此时在app/src/main/java路径下生成了一个.h文件，如图： 3.新建jni文件夹app-&gt;new-&gt;Floder-&gt;JNI Folder,如下图： 点击之后弹出选择框： 点击finish之后，main文件夹下生成jni文件夹，如下图： 4.实现项目中声明的Native方法在jni目录下创建JniUtil.c文件,然后将com_richsoft_jnidemo_JniUtil.h中的方法拷贝至JniUtil.c中，并实现这个方法，如下代码： #include&lt;jni.h&gt; JNIEXPORT jint JNICALL Java_com_richsoft_jnidemo_JniUtil_getJniAdd (JNIEnv *env, jclass cls, jint a, jint b) { return a + b; } 3.编译.so文件1.gradle内添加代码：在gradle.properties文件末尾添加上“android.useDeprecatedNdk=true”然后在app文件下build.grade－&gt;defaultConfig括号内添加如下代码： ndk { moduleName &quot;JniUtil&quot; //生成的so名字 abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; ,&quot;x86&quot;//输出指定三种abi体系结构下的so库，目前可有可无。 } 2.build 项目点击Build下的Make Project,成功之后打开app-&gt;intermediates-&gt;ndk-&gt;debug发现了四个文件夹,如下图： 到此，生成.so文件的过程结束。在src\\main下新建jniLibs文件夹，将上面的四个文件夹拷贝至jniLibs文件夹下，如图： 将jni文件夹和.h文件删除，如下图： 最后咱们试试生成的.so文件能不能用，贴下MainActivity代码： public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView tv = (TextView) findViewById(R.id.tv); tv.setText(&quot;java调用C语言实现的加法运算:2+1000=&quot; + JniUtil.getJniAdd(2, 10000)); } } 运行下程序，结果如下：","tags":[]}]