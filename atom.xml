<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏湘伦的Blog</title>
  <subtitle>求知若渴，虚怀若谷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suxianglun.github.io/"/>
  <updated>2017-11-28T12:11:06.000Z</updated>
  <id>http://suxianglun.github.io/</id>
  
  <author>
    <name>苏湘伦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android四大组件之Service</title>
    <link href="http://suxianglun.github.io/2017/11/07/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BService/"/>
    <id>http://suxianglun.github.io/2017/11/07/Android四大组件之Service/</id>
    <published>2017-11-07T14:53:12.000Z</published>
    <updated>2017-11-28T12:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android四大组件之Service（1）"><a href="#Android四大组件之Service（1）" class="headerlink" title="Android四大组件之Service（1）"></a>Android四大组件之Service（1）</h3><h4 id="1、Service概念、作用及特点"><a href="#1、Service概念、作用及特点" class="headerlink" title="1、Service概念、作用及特点"></a>1、Service概念、作用及特点</h4><p>先看一下源码里对Service的解释    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">* A Service is an application component representing either an application&apos;s desire</div><div class="line"> * to perform a longer-running operation while not interacting with the user</div><div class="line"> * or to supply functionality for other applications to use.  Each service</div><div class="line"> * class must have a corresponding</div><div class="line"> * &#123;@link android.R.styleable#AndroidManifestService &amp;lt;service&amp;gt;&#125;</div><div class="line"> * declaration in its package&apos;s &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.  Services</div><div class="line"> * can be started with</div><div class="line"> * &#123;@link android.content.Context#startService Context.startService()&#125; and</div><div class="line"> * &#123;@link android.content.Context#bindService Context.bindService()&#125;.</div><div class="line"> * </div><div class="line"> * &lt;p&gt;Note that services, like other application objects, run in the main</div><div class="line"> * thread of their hosting process.  This means that, if your service is going</div><div class="line"> * to do any CPU intensive (such as MP3 playback) or blocking (such as</div><div class="line"> * networking) operations, it should spawn its own thread in which to do that</div><div class="line"> * work.  More information on this can be found in</div><div class="line"> * &lt;a href=&quot;&#123;@docRoot&#125;guide/topics/fundamentals/processes-and-threads.html&quot;&gt;Processes and</div><div class="line"> * Threads&lt;/a&gt;.  The &#123;@link IntentService&#125; class is available</div><div class="line"> * as a standard implementation of Service that has its own thread where it</div><div class="line"> * schedules its work to be done.&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>从上边看出以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">概念：服务为Android四大组件之一   </div><div class="line">作用：提供在后台需要长期运行的服务（如复杂计算、下载等等）</div><div class="line">运行地方：在主线程中</div><div class="line">注意事项：使用前必须在AndroidManifest.xml注册，如果要进行长期的运行需要自己的线程，即新建一个线程，也可以使用标准的IntentService。</div><div class="line">启动方式：startService()和bindService()</div><div class="line">特点：长生命周期的、没有用户界面、在后台运行</div></pre></td></tr></table></figure>
<h4 id="2、Service分类、各自特点及应用场景"><a href="#2、Service分类、各自特点及应用场景" class="headerlink" title="2、Service分类、各自特点及应用场景"></a>2、Service分类、各自特点及应用场景</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/944365-8855e3a5340bece5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Service分类" title="">
                </div>
                <div class="image-caption">Service分类</div>
            </figure>
<h4 id="3、Service与Thread的区别："><a href="#3、Service与Thread的区别：" class="headerlink" title="3、Service与Thread的区别："></a>3、Service与Thread的区别：</h4><p>应该说Service和Thread没有任何联系，唯一相同点就是执行异步操作，由于Service有后台的概念，很容易将其和Thread混为一谈。一般来说，会将Service和Thread联合着用，即在Service中再创建一个子线程（工作线程）去处理耗时操作逻辑.     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override  </div><div class="line">public int onStartCommand(Intent intent, int flags, int startId) &#123;  </div><div class="line">//新建工作线程</div><div class="line">    new Thread(new Runnable() &#123;  </div><div class="line">        @Override  </div><div class="line">        public void run() &#123;  </div><div class="line">            // 开始执行后台任务  </div><div class="line">        &#125;  </div><div class="line">    &#125;).start();  </div><div class="line">    return super.onStartCommand(intent, flags, startId);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后台的定义：后台任务运行完全不依赖UI，即使Activity被销毁，或者程序被关闭，只要进程还在，后台任务就可以继续运行  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/944365-384170261e06ecbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="4、Service生命周期"><a href="#4、Service生命周期" class="headerlink" title="4、Service生命周期"></a>4、Service生命周期</h4><p>手动调用的方法：</p>
<table>
<thead>
<tr>
<th>手动调用的方法</th>
<th>作用</th>
<th>自动调用的内部方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>startService()</td>
<td>启动服务</td>
<td>onCreate()、onStartCommand()</td>
</tr>
<tr>
<td>stopService()</td>
<td>停止服务</td>
<td>onDestroy()</td>
</tr>
<tr>
<td>bindService()</td>
<td>绑定服务</td>
<td>onCreate()、onBind()</td>
</tr>
<tr>
<td>unbindService()</td>
<td>解绑服务</td>
<td>onUnBind()、 onDestroy()</td>
</tr>
</tbody>
</table>
<p>内部自动调用的方法：</p>
<table>
<thead>
<tr>
<th>内部自动调用的方法</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onCreate()</td>
<td>创建服务</td>
<td>首次创建服务时，系统将调用此方法来执行一次性设置程序（在调用onStartCommand() 或 onBind() 之前）。如果服务已在运行，则不会调用此方法。</td>
</tr>
<tr>
<td>onStartCommand()</td>
<td>开始服务</td>
<td>当另外一个组件（Activity）使用startService()启动服务的时候调用此方法。onStartCommmand()调用次数==启动次数，一旦执行此方法，服务即会启动并可在后台无限期运行。</td>
</tr>
<tr>
<td>onBind()</td>
<td>绑定服务</td>
<td>当另一个组件通过bindService()绑定服务时，系统会调用此方法，</td>
</tr>
<tr>
<td>onUnBind()</td>
<td>解绑服务</td>
<td>调用</td>
</tr>
<tr>
<td>onDestroy()</td>
<td>销毁服务</td>
<td>当服务不再使用且将被销毁时，系统将调用此方法。服务应该实现此方法来清理所有资源，如线程、注册的侦听器、接收器等。 这是服务接收的最后一个调用。    </td>
</tr>
</tbody>
</table>
<h4 id="Service-两种形式"><a href="#Service-两种形式" class="headerlink" title="Service 两种形式"></a>Service 两种形式</h4><ul>
<li><big><font color="blue">启动状态</font></big><br>当应用组件（例如Activity）通过startService（）启动服务后，Service就处于启动状态，就会一直运行下去，除非手动调用stopServiec()</li>
<li><big><font color="blue">绑定状态</font></big><br>与启动服务不同的是绑定服务的生命周期通常只在为其他应用组件(如Activity)服务时处于活动状态，不会无限期在后台运行，也就是说宿主(如Activity)解除绑定后，绑定服务就会被销毁</li>
</ul>
<p>此文章参考以下出处：<br><a href="http://blog.csdn.net/javazejian/article/details/52709857" target="_blank" rel="external">http://blog.csdn.net/javazejian/article/details/52709857</a><br><a href="http://www.jianshu.com/p/d963c55c3ab9/" target="_blank" rel="external">http://www.jianshu.com/p/d963c55c3ab9/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android四大组件之Service（1）&quot;&gt;&lt;a href=&quot;#Android四大组件之Service（1）&quot; class=&quot;headerlink&quot; title=&quot;Android四大组件之Service（1）&quot;&gt;&lt;/a&gt;Android四大组件之Service（
    
    </summary>
    
      <category term="Android" scheme="http://suxianglun.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://suxianglun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android四大组件之Activity</title>
    <link href="http://suxianglun.github.io/2017/11/03/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E4%B9%8BActivity%20%20/"/>
    <id>http://suxianglun.github.io/2017/11/03/Android四大组件之Activity  /</id>
    <published>2017-11-03T03:23:02.000Z</published>
    <updated>2017-11-06T08:05:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android四大组件之Activity"><a href="#Android四大组件之Activity" class="headerlink" title="Android四大组件之Activity"></a>Android四大组件之Activity</h3><h4 id="1、Activity生命周期"><a href="#1、Activity生命周期" class="headerlink" title="1、Activity生命周期"></a>1、Activity生命周期</h4><p>一般情况下Activity会经历如下生命周期：<br>为了方便先上一下官方的Activity生命周期图解</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.bdqn.cn/upload/2013/12/10/7841386643107.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p><strong>（1）onCreate()：</strong> 表示activity正在被创建，是activity的第一个生命周期，在这期间进行页面的初始化，setContenView()加载页面布局资源、初始化一些变量等工作。</p>
<p><strong>（2）onStart()：</strong> 表示activity正在启动，这个时候已经可见，但是还未出现在前台，不能和用户进行交互。这个时候activity已经出来了但我们看不到。</p>
<p><strong>（3）onResume()：</strong> 表示activity已经可见了，位于前台了，可以和用户进行交互。和onStart的相同点和区别：onStart和onResume时期Activity都已可见，但onStart不在前台，不能与用户进行交互，而onResume已在前台，可以和用户进行交互。</p>
<p><strong>（4）onPause()：</strong> 表示activity正在暂停，正常情况下紧接着就执行onStop,这期间可以进行一些动画停止、数据存储工作。但不能耗时，否则会影响新activity的启动。因为启动新activity时，执行onPause()后就会执行新Activity的onCreate</p>
<p><strong>（5）onStop()：</strong> 表示activity即将停止，这期间可以做一些重量级的回收工作。但不能太耗时</p>
<p><strong>（6）onDestroy()：</strong> 表示activity即将被销毁，这是activity最后一个生命周期，这期间可以做一些回收工作和资源回收。</p>
<p><strong>（7）onRestart()：</strong> 表示activity重新启动，即从不可见状态变为可见状态时就会被调用，一般情况下都是用户操作才会调用，例如用户操作Home键或者启动一个新页面，旧页面会执行onPause和onStop，然后再回到旧页面，这时就会调用onRestart，然后再调用onStart和onResume</p>
<h4 id="2、Activity启动模式"><a href="#2、Activity启动模式" class="headerlink" title="2、Activity启动模式"></a>2、Activity启动模式</h4><ul>
<li><p>2.1、<strong>standard</strong>  Activity默认的启动模式，每次启动Activity都会创建一个新的实例，放入任务栈中。这是一个典型的多实例，每一个任务栈可以有多个Activity，每个Activity可以属于多个任务栈。哪个Activity启动了当前Activity，当前Activity就放入改Activity所在的任务栈。比如<br>Activity A启动了Activity B，那么Activity B就位于Activity A所在的任务栈中。此模式下onCreate()、onStart()、onResume()都会执行。<br><img src="http://upload-images.jianshu.io/upload_images/1865963-95632974ce6906ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">   </p>
</li>
<li><p>2.2、<strong>singleTop</strong> 栈顶复用模式，启动的Activity位于栈顶时则会通过调用onNewItent()方法复用原来的Activity，不再创建一个新的实例。否则会像standard模式那样。一句话概述就是：<strong>当且仅当启动的 Activity 和上一个 Activity 一致的时候才会通过调用 onNewIntent() 方法重用 Activity</strong> 。使用场景：资讯阅读类 APP 的内容界面。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/1865963-ba7ce60bc7c5024c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">
                </div>
                <div class="image-caption">image.png</div>
            </figure>
</li>
</ul>
<ul>
<li>2.3 <strong>singleTask</strong> 栈内复用模式，当启动的Activity位于栈内时，就会通过调用onNewItent()方法复用当前的Activity，如果当前Activity上面还有其他Activity，同时会将其他Activity从栈内移出。如果栈内不存在当前Activity，则和standard模式一样。即： A -&gt;B -&gt; C -&gt; D -&gt; B，此时栈内变成了  A -&gt; B。而 A -&gt; B -&gt; C，栈内还是 A -&gt; B -&gt; C。使用场景：浏览器的主页面，或者大部分 APP 的主页面。</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/1865963-5b4d620903d03f94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">
                </div>
                <div class="image-caption">image.png</div>
            </figure>
<ul>
<li>2.4 <strong>singleInstance</strong> 单实例模式，是一个加强版的singleTask，除了拥有singleTask的特性外，此种模式下Activity单独在一个任务栈中，依然是调用 onNewIntent() 方法。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/1865963-445b30b1ea2d746a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title="">
                </div>
                <div class="image-caption">image.png</div>
            </figure>
</li>
</ul>
<p>到这里Activity启动模式就要说完了，其实还有一点与其相联系的知识，那就是<strong>Inent标签</strong><br>在 Android 中，我们除了在清单文件 AndroidManifest.xml 中配置 launchMode，当然可以用 Intent 标签说事儿。启动 Activity ，我们需要传递一个 Intent，完全可以通过设置 Intent.setFlags(int flags) 来设置启动的 Activity 的启动模式。</p>
<p>需要注意的是：通过代码来设置 Activity 的启动模式的方式，优先级比清单文件设置更高。</p>
<p>FLAG_ACTIVITY_NEW_TASK<br>这个标识会使新启动的 Activity 独立创建一个 Task。</p>
<p>FLAG_ACTIVITY_CLEAR_TOP<br>这个标识会使新启动的 Activity 检查是否存在于 Task 中，如果存在则清除其之上的 Activity，使它获得焦点，并不重新实例化一个 Activity，一般结合 FLAG_ACTIVITY_NEW_TASK 一起使用。</p>
<p>FLAG_ACTIVITY_SINGLE_TOP<br>等同于在 launcherMode 属性设置为 singleTop。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android四大组件之Activity&quot;&gt;&lt;a href=&quot;#Android四大组件之Activity&quot; class=&quot;headerlink&quot; title=&quot;Android四大组件之Activity&quot;&gt;&lt;/a&gt;Android四大组件之Activity&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="Android" scheme="http://suxianglun.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://suxianglun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android消息机制</title>
    <link href="http://suxianglun.github.io/2017/10/30/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://suxianglun.github.io/2017/10/30/Android消息机制/</id>
    <published>2017-10-30T03:15:04.000Z</published>
    <updated>2017-10-30T05:53:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android消息机制"><a href="#Android消息机制" class="headerlink" title="Android消息机制"></a>Android消息机制</h3><p>读了《Android开发艺术探索》中Android消息机制后对Android消息机制有了一个更深的理解，Android<br>消息机制主要就是Handler运行机制。Handler运行机制需要MessageQueue、Looper来作为支撑。</p>
<h5 id="1、MessageQueue工作原理"><a href="#1、MessageQueue工作原理" class="headerlink" title="1、MessageQueue工作原理"></a>1、MessageQueue工作原理</h5><p>MessageQueue即消息队列，主要进行两个操作：插入消息和读取消息，分别对应的方法是enqueueMessage()和next(),读取消息伴随着删除操作。MessageQueue命名为消息队列，其实内部却是使用单向链表的数据结构来维护消息队列的，单向链表在数据的插入和删除效率较高，具有优势。enqueueMessage()方法内部是对单链表的操作，next()方法内部是一个死循环，如果消息队列中没有消息，就一直阻塞在那里。</p>
<h5 id="2、Looper工作原理"><a href="#2、Looper工作原理" class="headerlink" title="2、Looper工作原理"></a>2、Looper工作原理</h5><p>Looper 在消息机制中起到消息循环的作用，Looper.prepare()获得当前线程的Looper对象，然后再通过Looper.loop()开启消息循环。除了prepare（）方法，Looper.prepareMainLooper()方法可以获取主线程的Looper,当然此方法也是通过prepare（）来实现的。Looper.getMainLooper()可以在任何地方获取主线程的Looper对象。Looper还可以退出，通过quit()和quitSafely()，二者区别是quit()是直接退出，quitSafely（）是先设定一个退出标记，然后将消息队列的中已有的消息都处理完后再退出。<br>Looper退出后，Handler send消息时就会报错。Looper.loop()方法执行后才开启消息循环，loop（）方法是一个无限循环，直到MessageQueue.next()返回null时跳出循环。</p>
<h5 id="3、Handler工作原理"><a href="#3、Handler工作原理" class="headerlink" title="3、Handler工作原理"></a>3、Handler工作原理</h5><p>Handler主要就是进行消息的发送和接受，发送消息主要通过send的一系列方法和post的一系列方法，post方法也是通过send来实现的。Handler发送一条消息只是将该条数据插入Messagequeue中，Messagequeue的next()方法就会将这条消息返回给Looper,Looper收到消息后就开始处理了，最终Looper将消息交给Handler处理，即调用Handler的dispathMessage()。在dispathMessage()方法中先判断msg.callback是否为空，callback是一个Runnable对象，即handler的post()方法中Runnable,如果不为空就调用handleCallback()方法，然后在判断mCallback是否为空，不为空就调用mCallback的handleMessage()方法，mCallback是一个接口，创建Handler handler=new Handler（callback）时需要传一个callback。也就是说我们可以通过callback无须派生一个Handler子类就可以创建Handler，这样最终就调用handler的handMessage()方法。</p>
<h5 id="4、Handler使用说明"><a href="#4、Handler使用说明" class="headerlink" title="4、Handler使用说明"></a>4、Handler使用说明</h5><p>要想知道当前的Handler是哪个线程的Handler只需知道创建Handler时绑定的是哪个线程的Looper,如果创建的时候没有指定Looper，那就是主线程的Handler，因为只有主线程的Looper已经被获取，其他线程需要手动获取。还有一点就是，在哪个线程使用Handler的send或者post一系列方法，就是从当前Handler所在的线程给Handler本身所属的线程发消息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android消息机制&quot;&gt;&lt;a href=&quot;#Android消息机制&quot; class=&quot;headerlink&quot; title=&quot;Android消息机制&quot;&gt;&lt;/a&gt;Android消息机制&lt;/h3&gt;&lt;p&gt;读了《Android开发艺术探索》中Android消息机制后对And
    
    </summary>
    
      <category term="Android" scheme="http://suxianglun.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://suxianglun.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>if __name__ == &quot;__main__&quot;:是干嘛的?</title>
    <link href="http://suxianglun.github.io/2017/08/16/name==main%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://suxianglun.github.io/2017/08/16/name==main的作用/</id>
    <published>2017-08-16T04:46:17.000Z</published>
    <updated>2017-08-16T04:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>《宫词·故国三千里》–张祜<br>故国三千里，深宫二十年。<br>一声何满子，双泪落君前。</p>
</blockquote>
</blockquote>
<h4 id="if-name-“main“-是干嘛的"><a href="#if-name-“main“-是干嘛的" class="headerlink" title="if name == “main“:是干嘛的?"></a>if <strong>name</strong> == “<strong>main</strong>“:是干嘛的?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># Threading example</div><div class="line">import time, thread</div><div class="line"></div><div class="line">def myfunction(string, sleeptime, lock, *args):</div><div class="line">    while 1:</div><div class="line">        lock.acquire()</div><div class="line">        time.sleep(sleeptime)</div><div class="line">        lock.release()</div><div class="line">        time.sleep(sleeptime)</div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    lock = thread.allocate_lock()</div><div class="line">    thread.start_new_thread(myfunction, (&quot;Thread #: 1&quot;, 2, lock))</div><div class="line">    thread.start_new_thread(myfunction, (&quot;Thread #: 2&quot;, 2, lock))</div></pre></td></tr></table></figure>
<p>当Python解析器读取一个源文件时,它会执行所有的代码.在执行代码前,会定义一些特殊的变量.例如,如果解析器运行的模块(源文件)作为主程序,它将会把<strong>name</strong>变量设置成”<strong>main</strong>“.如果只是引入其他的模块,<strong>name</strong>变量将会设置成模块的名字.</p>
<p>假设下面是你的脚本,让我们作为主程序来执行:  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python threading_example.py</div></pre></td></tr></table></figure>
<p>当设置完特殊变量,它就会执行import语句并且加载这些模块.当遇到def代码段的时候,它就会创建一个函数对象并创建一个名叫myfunction变量指向函数对象.接下来会读取if语句并检查<strong>name</strong>是不是等于”<strong>main</strong>“,如果是的话他就会执行这个代码段.</p>
<p>这么做的原因是有时你需要你写的模块既可以直接的执行,还可以被当做模块导入到其他模块中去.通过检查是不是主函数,可以让你的代码只在它作为主程序运行时执行,而当其他人调用你的模块中的函数的时候不必执行.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《宫词·故国三千里》–张祜&lt;br&gt;故国三千里，深宫二十年。&lt;br&gt;一声何满子，双泪落君前。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;if-name
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>解决Python2.7的UnicodeEncodeError异常错误</title>
    <link href="http://suxianglun.github.io/2017/08/16/%E8%A7%A3%E5%86%B3Python2.7UnicodeEncodeError%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF/"/>
    <id>http://suxianglun.github.io/2017/08/16/解决Python2.7UnicodeEncodeError异常错误/</id>
    <published>2017-08-16T04:37:55.000Z</published>
    <updated>2017-08-16T04:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      芙蓉楼送辛渐  </div><div class="line">        </div><div class="line">     (唐代：王昌龄)   </div><div class="line">寒雨连江夜入吴，平明送客楚山孤。    </div><div class="line">洛阳亲友如相问，一片冰心在玉壶。</div></pre></td></tr></table></figure>
<h3 id="1、解决Python2-7的UnicodeEncodeError-‘ascii’-codec-can’t-encode异常错误"><a href="#1、解决Python2-7的UnicodeEncodeError-‘ascii’-codec-can’t-encode异常错误" class="headerlink" title="1、解决Python2.7的UnicodeEncodeError: ‘ascii’ codec can’t encode异常错误"></a>1、解决Python2.7的UnicodeEncodeError: ‘ascii’ codec can’t encode异常错误</h3><p>最近练习Python爬虫的时候遇到一个错误，先上解决错误前的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">   # coding:utf-8</div><div class="line">import urllib2</div><div class="line">import sysfrom bs4 import BeautifulSoup</div><div class="line">import uniout</div><div class="line">from quote import Quote</div><div class="line"></div><div class="line"></div><div class="line">class Xianqian:</div><div class="line">    def __init__(self):</div><div class="line">        self.url = &apos;http://www.juzimi.com/先秦&apos;</div><div class="line">        self.headers = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&apos;&#125;</div><div class="line"></div><div class="line">    def get_writer(self):</div><div class="line">        # reload(sys)</div><div class="line">        # sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class="line">       </div><div class="line">        req = urllib2.Request(self.url, headers=self.headers, )</div><div class="line">        res = urllib2.urlopen(req)</div><div class="line">        soup = BeautifulSoup(res.read(), &apos;html.parser&apos;)</div><div class="line">        print soup</div></pre></td></tr></table></figure></p>
<h3 id="2、出现如下错误"><a href="#2、出现如下错误" class="headerlink" title="2、出现如下错误"></a>2、出现如下错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 14-15: ordinal not in range(128)</div></pre></td></tr></table></figure>
<h3 id="3、分析原因："><a href="#3、分析原因：" class="headerlink" title="3、分析原因："></a>3、分析原因：</h3><p>看了下异常信息，是因为编码问题：Unicode编码与ASCII编码的不兼容，其实这个Python脚本文件是由utf-8编码的,而Python默认环境编码是ascii编码方式，由此Python自然调用ascii编码解码程序去处理字符流，当字符流不属于ascii范围内，就会抛出异常（ordinal not in range(128)）。如果你不知道Python默认环境编码是什么，可以通过下面的方法可以获取:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">print sys.getdefaultencoding()</div><div class="line"># &apos;ascii&apos;</div></pre></td></tr></table></figure>
<h3 id="4、解决方案："><a href="#4、解决方案：" class="headerlink" title="4、解决方案："></a>4、解决方案：</h3><p>通过sys.setdefaultencoding(‘utf-8)设置Python默认环境编码为utf-8，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">sys.setdefaultencoding(‘utf-8)</div></pre></td></tr></table></figure>
<p>但是运行之后出现了如下错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AttributeError: &apos;module&apos; object has no attribute &apos;setdefaultencoding&apos;</div></pre></td></tr></table></figure>
<p>意思是说sys没有setdefaultencoding()这个方法，其实是有的，只不过是先需要reload(sys)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</div></pre></td></tr></table></figure>
<p>这样就可以正常运行了<br>修改后的代码如下: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># coding:utf-8</div><div class="line">import urllib2</div><div class="line">import sys</div><div class="line">from bs4 import BeautifulSoup</div><div class="line">import uniout</div><div class="line">from quote import Quote</div><div class="line"></div><div class="line"></div><div class="line">class Xianqian:</div><div class="line">    def __init__(self):</div><div class="line">        self.url = &apos;http://www.juzimi.com/&apos;</div><div class="line">        self.headers = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&apos;&#125;</div><div class="line"></div><div class="line">    def get_writer(self):</div><div class="line">        reload(sys)</div><div class="line">        sys.setdefaultencoding(&apos;utf-8&apos;)</div><div class="line">        quote = Quote()</div><div class="line">        req = urllib2.Request(self.url, headers=self.headers)</div><div class="line">        res = urllib2.urlopen(req)</div><div class="line">        soup = BeautifulSoup(res.read(), &apos;html.parser&apos;)</div><div class="line">        print soup</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div 
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python中range和xrange的区别</title>
    <link href="http://suxianglun.github.io/2017/07/24/python%E4%B8%ADrange%E5%92%8Cxrange%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://suxianglun.github.io/2017/07/24/python中range和xrange的区别/</id>
    <published>2017-07-24T06:26:20.000Z</published>
    <updated>2017-07-24T07:33:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>《行宫》–元稹   </p>
<p>寥落古行宫，宫花寂寞红。<br>  白头宫女在，闲坐说玄宗。</p>
</blockquote>
</blockquote>
<h4 id="range-start-None-stop-None-step-None-函数说明："><a href="#range-start-None-stop-None-step-None-函数说明：" class="headerlink" title="range(start=None, stop=None, step=None)函数说明："></a>range(start=None, stop=None, step=None)函数说明：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Return a list containing an arithmetic progression of integers.     </div><div class="line">  	range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.</div><div class="line">    When step is given, it specifies the increment (or decrement).</div><div class="line">    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!</div><div class="line">    These are exactly the valid indices for a list of 4 elements.</div></pre></td></tr></table></figure>
<p>大致意思就是：range函数返回的是包含一个等差数列的整数列表，根据参数start与stop指定的范围以及step设定的差值，生成一个列表。 如果不指定step默认差值就是1，如果指定step，它指定递增(或递减)，差值就是step.如果不明白举个栗子，如果还不明白就举2个栗子。    </p>
<p>例子1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=range(0,10,2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[0, 2, 4, 6, 8]</div><div class="line">&lt;type &apos;list&apos;&gt;</div></pre></td></tr></table></figure>
<p>例子2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=range(0,-10,-2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[0, -2, -4, -6, -8]</div><div class="line">&lt;type &apos;list&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="xrange-函数说明：和range-的用法完全相同，但是返回的是一个生成器。"><a href="#xrange-函数说明：和range-的用法完全相同，但是返回的是一个生成器。" class="headerlink" title="xrange 函数说明：和range 的用法完全相同，但是返回的是一个生成器。"></a>xrange 函数说明：和range 的用法完全相同，但是返回的是一个生成器。</h4><p>例子1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=xrange(0,10,2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[xrange(0, 10, 2)</div><div class="line">&lt;type &apos;xrange&apos;&gt;</div></pre></td></tr></table></figure>
<p>例子2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=xrange(0,-10,-2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xrange(0, -10, -2)</div><div class="line">&lt;type &apos;xrange&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="range和xrange区别："><a href="#range和xrange区别：" class="headerlink" title="range和xrange区别："></a>range和xrange区别：</h4><p>两个都是在循环迭代的时候使用，range返回的是个list,xrange返回的是xrange对象，生成很小的数字序列时候性能没什么区别，但是要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间。如果你不是为了要返回一个list,在循环中尽量使用xrange。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《行宫》–元稹   &lt;/p&gt;
&lt;p&gt;寥落古行宫，宫花寂寞红。&lt;br&gt;  白头宫女在，闲坐说玄宗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;rang
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python PIL库安装</title>
    <link href="http://suxianglun.github.io/2017/07/05/Python%20pIL%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>http://suxianglun.github.io/2017/07/05/Python pIL库安装/</id>
    <published>2017-07-05T08:01:16.000Z</published>
    <updated>2017-07-25T06:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首</p>
<blockquote>
<blockquote>
<p> 听筝<br>唐代：李端<br>鸣筝金粟柱，素手玉房前。<br>欲得周郎顾，时时误拂弦。</p>
</blockquote>
</blockquote>
<p>由于需要使用Python操作图片，想使用<strong>sudo pip install PIL</strong>引入PIL(Python Imaging Library)库，但是结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">could not find a version that satisfies the requirement PIL.(form versions:)</div><div class="line">No matching distribution found for PIL.</div></pre></td></tr></table></figure>
<p>这个提示很费解，只能去找度娘了，原来已经用Pillow代替了PIL，在使用方面没有不同，API都是相同的。真是个挨千刀的，提示信息里怎么不告诉我们这些刚学Python的小白呢，还得白忙活半天。既然这样那就老老实实安装Pillow吧。但是又发现Pillow需要依赖multiprocessing，所以必须先安装multiprocessing。命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install multiprocessing</div></pre></td></tr></table></figure>
<p>接着再执行如下命令：   </p>
<pre><code>sudo pip install Pillow
</code></pre><p>引入模块要按照下面的方式写（注意大小写）<br>第一种：from PIL import Image<br>第二种：from PIL.Image(用这种方式时，下面使用时也得写成PIL.Image.open(‘1.png’)，或者可以在引入时修改下模块名，如from PIL.Image as image)</p>
<p>引入之后就可以正常使用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 听筝&lt;br&gt;唐代：李端&lt;br&gt;鸣筝金粟柱，素手玉房前。&lt;br&gt;欲得周郎顾，时时误拂弦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于需要使用Python操作
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之join()</title>
    <link href="http://suxianglun.github.io/2017/06/01/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8Bjoin()/"/>
    <id>http://suxianglun.github.io/2017/06/01/Java线程常用方法之join()/</id>
    <published>2017-06-01T08:10:06.000Z</published>
    <updated>2017-07-25T06:24:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p> 送崔九<br>唐代：裴迪<br>归山深浅去，须尽丘壑美。<br>莫学武陵人，暂游桃源里。</p>
</blockquote>
</blockquote>
<p>join()方法的作用是等待线程销毁。例如在main线程新起一个子线程，子线程需要做一些耗时造作，main线程想要得到子线程执行完成的数据，就必须等到执行完子线程再去执行，这时候就可以用join来解决。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyThread04 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try&#123;</div><div class="line">            int value=(int)(Math.random()*1000);</div><div class="line">            System.out.println(&quot;thread04 value=&quot;+value);</div><div class="line">            Thread.sleep(value);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>YieldTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class JoinTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread04 thread04=new MyThread04();</div><div class="line">        thread04.start();</div><div class="line">//        try &#123;</div><div class="line">//            thread04.join();</div><div class="line">//        &#125;catch (InterruptedException e)&#123;</div><div class="line">//            e.printStackTrace();</div><div class="line">//        &#125;</div><div class="line">        System.out.println(&quot;我想在thread04之后执行&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>我想在thread04之后执行<br>thread04 value=8</p>
</blockquote>
</blockquote>
<p>从结果上看，主线程和子线程是异步的，并没有在子线程执行完之后才执行，而是在子线程执行过程中就执行了主线程。如果想要实现同步的话，需要用到join()方法</p>
<p>将MyThread03类更改一下    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class JoinTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread04 thread04=new MyThread04();</div><div class="line">        thread04.start();</div><div class="line">        try &#123;</div><div class="line">            thread04.join();</div><div class="line">           </div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">		 System.out.println(&quot;我想在thread04之后执行&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：    </p>
<blockquote>
<blockquote>
<p>thread04 value=323<br>我想在thread04之后执行</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 送崔九&lt;br&gt;唐代：裴迪&lt;br&gt;归山深浅去，须尽丘壑美。&lt;br&gt;莫学武陵人，暂游桃源里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;join()方法的作用是
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之yield()</title>
    <link href="http://suxianglun.github.io/2017/06/01/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8Byield()/"/>
    <id>http://suxianglun.github.io/2017/06/01/Java线程常用方法之yield()/</id>
    <published>2017-06-01T07:41:19.000Z</published>
    <updated>2017-07-25T06:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p> 杂诗<br>唐代：王维<br>君自故乡来，应知故乡事。<br>来日绮窗前，寒梅著花未？</p>
</blockquote>
</blockquote>
<p>yield()方法的作用是让当前线程放弃当前cup资源，让其他任务获取cup资源。但放弃的时间不确定，有可能放放弃又马上获取cpu资源。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyThread03 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        long beginTime=System.currentTimeMillis();</div><div class="line">        int count=0;</div><div class="line">        for (int i=0;i&lt;50000000;i++)&#123;</div><div class="line">//            Thread.yield();</div><div class="line">            count=count+(i+1);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        long endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;用时=&quot;+(endTime-beginTime)+&quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>YieldTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class YieldTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread03 thread03=new MyThread03();</div><div class="line">        thread03.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>用时=23毫秒</p>
</blockquote>
</blockquote>
<p>将MyThread03类更改一下    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyThread03 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        long beginTime=System.currentTimeMillis();</div><div class="line">        int count=0;</div><div class="line">        for (int i=0;i&lt;50000000;i++)&#123;</div><div class="line">            Thread.yield();</div><div class="line">            count=count+(i+1);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        long endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;用时=&quot;+(endTime-beginTime)+&quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：    </p>
<blockquote>
<blockquote>
<p>用时=10552毫秒</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 杂诗&lt;br&gt;唐代：王维&lt;br&gt;君自故乡来，应知故乡事。&lt;br&gt;来日绮窗前，寒梅著花未？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;yield()方法的作用是
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之sleep()</title>
    <link href="http://suxianglun.github.io/2017/06/01/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8Bsleep()%20/"/>
    <id>http://suxianglun.github.io/2017/06/01/Java线程常用方法之sleep() /</id>
    <published>2017-06-01T07:25:55.000Z</published>
    <updated>2017-07-25T06:28:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p> 山中送别<br>唐代：王维<br>山中相送罢，<br>日暮掩柴扉。<br>春草明年绿，<br>王孙归不归？</p>
</blockquote>
</blockquote>
<p>sleep()方法的作用是在指定的毫秒数中让当前运行的线程休眠，当前的线程指的是this.currentTread() </p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class  MyThread02 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            System.out.println(&quot;Thread name:&quot;+Thread.currentThread().getName()+&quot;begin=&quot;+System.currentTimeMillis());</div><div class="line">            Thread.sleep(2000);</div><div class="line">            System.out.println(&quot;Thread name:&quot;+Thread.currentThread().getName()+&quot;end=&quot;+System.currentTimeMillis());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>SleepTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class SleepTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread02 thread02=new MyThread02();</div><div class="line">        System.out.println(&quot;Begin&quot;);</div><div class="line">        thread02.start();</div><div class="line">        System.out.println(&quot;end&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>Begin<br>end<br>Thread name:Thread-0begin=1496281723821<br>Thread name:Thread-0end=1496281725822   </p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 山中送别&lt;br&gt;唐代：王维&lt;br&gt;山中相送罢，&lt;br&gt;日暮掩柴扉。&lt;br&gt;春草明年绿，&lt;br&gt;王孙归不归？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;sle
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之isAlive()</title>
    <link href="http://suxianglun.github.io/2017/05/27/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8BisAlive()/"/>
    <id>http://suxianglun.github.io/2017/05/27/Java线程常用方法之isAlive()/</id>
    <published>2017-05-27T08:49:30.000Z</published>
    <updated>2017-07-24T07:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>《春怨 / 伊州歌》<br>唐代：金昌绪<br>打起黄莺儿，莫教枝上啼。<br>啼时惊妾梦，不得到辽西。</p>
</blockquote>
</blockquote>
<p>这篇主要来了解一下isAlive()方法，此方法返回当前线程是否处于“活动状态”，何为“活动状态”，线程已经启动尚未终止。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class MyThread01 extends Thread&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;Name:&quot;+Thread.currentThread().getName());</div><div class="line">        System.out.println(&quot;state:&quot;+Thread.currentThread().isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>IsAliveTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class IsAliveTest &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        MyThread01 thread01=new MyThread01();</div><div class="line">        System.out.println(&quot;begin:&quot;+thread01.isAlive());</div><div class="line">        thread01.start();</div><div class="line">        System.out.println(&quot;end:&quot;+thread01.isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>begin:false<br>end:true<br>Name:Thread-0<br>state:true </p>
</blockquote>
</blockquote>
<p>将IsAliveTest类改为如下：     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class IsAliveTest &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        MyThread01 thread01=new MyThread01();</div><div class="line">        System.out.println(&quot;begin:&quot;+thread01.isAlive());</div><div class="line">        thread01.start();</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;end:&quot;+thread01.isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<blockquote>
<p>begin:false<br>Name:Thread-0<br>state:true<br>end:false</p>
</blockquote>
</blockquote>
<p>调用Thread.sleep(1000)让主线程休眠1秒，在这1秒内Thread-0线程已经执行完毕，再调用isAlive()时返回false</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《春怨 / 伊州歌》&lt;br&gt;唐代：金昌绪&lt;br&gt;打起黄莺儿，莫教枝上啼。&lt;br&gt;啼时惊妾梦，不得到辽西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇主要来
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之currentThread（）</title>
    <link href="http://suxianglun.github.io/2017/05/27/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8BcurrentThread()/"/>
    <id>http://suxianglun.github.io/2017/05/27/Java线程常用方法之currentThread()/</id>
    <published>2017-05-27T08:35:30.000Z</published>
    <updated>2017-05-27T08:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java线程中有很多常用的方法，需要花费一些时间来理解，今天就先来学习一下currentThread（）方法。<br>currentThread（）方法返回调用此代码段的线程信息，其中可以通过     Thread.currentThread().getId()获取当前线程id<br>Thread.currentThread().getName()获取当前线程name<br>Thread.currentThread().getPriority()获取当前线程优先级     </p>
<p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class MyThread extends Thread&#123;</div><div class="line">    public  MyThread()&#123;</div><div class="line">        System.out.println(&quot;构造方法中打印的线程名字：&quot;+Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;run方法中打印的线程名字：&quot;+Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>CurrentThreadTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class CurrentThreadTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[ ]args)&#123;</div><div class="line">        Thread thread=new MyThread();</div><div class="line">        thread.start();</div><div class="line">//        thread.run();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>构造方法中打印的线程名字：main<br>run方法中打印的线程名字：Thread-0  </p>
</blockquote>
</blockquote>
<p>说明MyThread类的构造方法被main线程调用的，run方法是自动调用的方法。</p>
<p>将CurrentThreadTest类改为如下：     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class CurrentThreadTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[ ]args)&#123;</div><div class="line">        Thread thread=new MyThread();</div><div class="line">//        thread.start();</div><div class="line">        thread.run();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<blockquote>
<p>构造方法中打印的线程名字：main<br>run方法中打印的线程名字：main     </p>
</blockquote>
</blockquote>
<p>说明MyThread类的构造方法被main线程调用的，run方法是被main线程调用的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java线程中有很多常用的方法，需要花费一些时间来理解，今天就先来学习一下currentThread（）方法。&lt;br&gt;currentThread（）方法返回调用此代码段的线程信息，其中可以通过     Thread.currentThread().getId()获取当前线程
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程的五种状态</title>
    <link href="http://suxianglun.github.io/2017/05/26/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%20/"/>
    <id>http://suxianglun.github.io/2017/05/26/Java线程的状态 /</id>
    <published>2017-05-26T09:34:36.000Z</published>
    <updated>2017-07-25T06:27:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p> 送上人<br>唐代：刘长卿<br>孤云将野鹤，岂向人间住。<br>莫买沃洲山，时人已知处。</p>
</blockquote>
</blockquote>
<h4 id="什么是线程："><a href="#什么是线程：" class="headerlink" title="什么是线程："></a>什么是线程：</h4><p>一个线程是进程的一个顺序执行流。同类的多个线程共享一块内存空间和一组系统资源，一个进程中可以包含多个线程。    </p>
<h4 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h4><p>一个进程至少有一个线程。线程的划分尺度小于进程，使得多线程程序的并发性高。另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p><img src="http://pdf7.tarena.com.cn/tts8_source/ttsPage/JAVA/JSD_N_V06/JAVASE02/DAY04/SUPERDOC/01/index.files/image001.png" alt=""></p>
<h5 id="新建状态"><a href="#新建状态" class="headerlink" title="新建状态"></a>新建状态</h5><p>当用new操作符创建一个线程时。此时程序还没有开始运行线程中的代码。</p>
<h5 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h5><p>个新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当线程对象调用start()方法即启动了线程，start()方法创建线程运行的系统资源，并调度线程运行run()方法。当start()方法返回后，线程就处于就绪状态。</p>
<p>处于就绪状态的线程并不一定立即运行run()方法，线程还必须同其他线程竞争CPU时间，只有获得CPU时间才可以运行线程。因为在单CPU的计算机系统中，不可能同时运行多个线程，一个时刻仅有一个线程处于运行状态。因此此时可能有多个线程处于就绪状态。对多个处于就绪状态的线程是由Java运行时系统的线程调度程序来调度的。</p>
<h5 id="运行状态（Running）"><a href="#运行状态（Running）" class="headerlink" title="运行状态（Running）"></a>运行状态（Running）</h5><p>当线程获得CPU时间后，它才进入运行状态，真正开始执行run()方法。</p>
<h5 id="阻塞状态（blocked）"><a href="#阻塞状态（blocked）" class="headerlink" title="阻塞状态（blocked）"></a>阻塞状态（blocked）</h5><p>线程运行过程中，可能由于各种原因进入阻塞状态：</p>
<p>①线程通过调用sleep方法进入睡眠状态；</p>
<p>②线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者；</p>
<p>③线程试图得到一个锁，而该锁正被其他线程持有；</p>
<p>④线程在等待某个触发条件；</p>
<p>所谓阻塞状态是正在运行的线程没有运行结束，暂时让出CPU，这时其他处于就绪状态的线程就可以获得CPU时间，进入运行状态。</p>
<h5 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h5><p>有两个原因会导致线程死亡：</p>
<p>①run方法正常退出而自然死亡；</p>
<p>②一个未捕获的异常终止了run方法而使线程猝死；</p>
<p>为了确定线程在当前是否存活着（就是要么是可运行的，要么是被阻塞了），需要使用isAlive方法，如果是可运行或被阻塞，这个方法返回true；如果线程仍旧是new状态且不是可运行的，或者线程死亡了，则返回false。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 送上人&lt;br&gt;唐代：刘长卿&lt;br&gt;孤云将野鹤，岂向人间住。&lt;br&gt;莫买沃洲山，时人已知处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是线程：
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中val 和var的区别</title>
    <link href="http://suxianglun.github.io/2017/05/24/Kotlin%E4%B8%ADval%20%E5%92%8Cvar%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://suxianglun.github.io/2017/05/24/Kotlin中val 和var的区别/</id>
    <published>2017-05-24T07:25:28.000Z</published>
    <updated>2017-07-25T06:30:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首</p>
<blockquote>
<blockquote>
<p> 静夜思<br>唐代：李白<br>床前明月光，疑是地上霜。<br>举头望明月，低头思故乡。</p>
</blockquote>
</blockquote>
<p>前几天朋友圈刷爆了关于Kotlin成为Android官方语言的新闻，为了体验一下，开始学习Kotlin的基础语法。其中Kotlin中有两个关键字定义变量var和val,区别如下：    </p>
<p><strong>var：</strong> var是一个可变变量，这是一个可以通过重新分配来更改为另一个值的变量。这种声明变量的方式和Java中声明变量的方式一样。<br><strong>val:</strong>  val是一个只读变量，这种声明变量的方式相当于java中的final变量。一个val创建的时候必须初始化，因为以后不能被改变。</p>
<p>上段代码体验一下：</p>
<pre><code>var name = &quot;lao wang&quot;
println(name)
name = &quot;xiao wang&quot;
println(name)
val finalValue = &quot;我万年不变的老李&quot;;
println(finalValue);
</code></pre><p>结果如下：</p>
<blockquote>
<p>lao wang<br>xiao wang<br>我万年不变的老李</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 静夜思&lt;br&gt;唐代：李白&lt;br&gt;床前明月光，疑是地上霜。&lt;br&gt;举头望明月，低头思故乡。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;前几天朋友圈刷爆了关于Ko
    
    </summary>
    
      <category term="Kotlin" scheme="http://suxianglun.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://suxianglun.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>flask_restful安装遇到的问题</title>
    <link href="http://suxianglun.github.io/2017/05/15/%E5%AE%89%E8%A3%85%20Flask-RESTful%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://suxianglun.github.io/2017/05/15/安装 Flask-RESTful遇到的问题/</id>
    <published>2017-05-15T09:40:16.000Z</published>
    <updated>2017-07-24T07:44:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>《登乐游原》–李商隐<br>向晚意不适，驱车登古原。<br>夕阳无限好，只是近黄昏。</p>
</blockquote>
</blockquote>
<h4 id="1-使用-pip-安装-Flask-RESTful"><a href="#1-使用-pip-安装-Flask-RESTful" class="headerlink" title="1.使用 pip 安装 Flask-RESTful:"></a>1.使用 pip 安装 Flask-RESTful:</h4><blockquote>
<p>pip install flask-restful</p>
</blockquote>
<p>使用pip安装第三方库总是提示：You are using pip version 8.0.2, however version 8.1.0 is available</p>
<p>且输入“python -m pip install -U pip”升级pip版本命名还是报同样的错误。 </p>
<p><strong>解决办法：</strong><br>  <strong>第一步：</strong>使用PyCharm，选择file→Setting，找到pip 双击<br>  <img src="http://www.chenxm.cc/zb_users/upload/2016/07/201607221469181275894919.jpg" alt="">     </p>
<p>  <strong>第二步：</strong>按照图片，点击pip，勾选specify version，然后点击 install package<br>  <img src="http://www.chenxm.cc/zb_users/upload/2016/07/201607221469181275770256.jpg" alt=""></p>
<p>  <strong>第三步：</strong>如果安装出现连接不成功，请使用VPN；<br>  如果出现报错：“UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xd7 in position 9: ordinal not in range(128)”请修改mimetypes.py文件，路径位于python的安装路径下的Lib\mimetypes.py文件。在import下添加如下几行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if sys.getdefaultencoding() != &apos;gbk&apos;:</div><div class="line">    reload(sys)</div><div class="line">    sys.setdefaultencoding(&apos;gbk&apos;)</div></pre></td></tr></table></figure>
<p> 然后重复第二步操作，安装即可。</p>
<p><strong>注意：</strong><br>其实也可以直接执行第三步，直接修改mimetypes.py文件的信息，然后输入pip升级命令“python -m pip install -U pip”     </p>
<h4 id="2-安装过程中遇到的第二个问题："><a href="#2-安装过程中遇到的第二个问题：" class="headerlink" title="2.安装过程中遇到的第二个问题："></a>2.安装过程中遇到的第二个问题：</h4><p>Permission denied: ‘/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/dateutil’  </p>
<p>这里是因为权限问题，需要使用sudo安装，键入如下代码安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install flask-restful</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《登乐游原》–李商隐&lt;br&gt;向晚意不适，驱车登古原。&lt;br&gt;夕阳无限好，只是近黄昏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-使用-pip-安
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java关键字this的使用</title>
    <link href="http://suxianglun.github.io/2017/05/11/Java%E5%85%B3%E9%94%AE%E5%AD%97this%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://suxianglun.github.io/2017/05/11/Java关键字this的使用/</id>
    <published>2017-05-11T02:44:15.000Z</published>
    <updated>2017-07-24T07:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>《八阵图》–杜甫<br>功盖三分国，名成八阵图。<br>江流石不转，遗恨失吞吴。</p>
</blockquote>
</blockquote>
<h4 id="1-成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。"><a href="#1-成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。" class="headerlink" title="1.成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。"></a>1.成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  public class Hello &#123;</div><div class="line">   String s = &quot;Hello&quot;;</div><div class="line"></div><div class="line">   public Hello(String s) &#123;</div><div class="line">      System.out.println(&quot;s = &quot; + s);</div><div class="line">      System.out.println(&quot;1 -&gt; this.s = &quot; + this.s);</div><div class="line">      this.s = s;//把参数值赋给成员变量，成员变量的值改变</div><div class="line">      System.out.println(&quot;2 -&gt; this.s = &quot; + this.s);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">      Hello x = new Hello(&quot;HelloWorld!&quot;);</div><div class="line">      System.out.println(&quot;s=&quot; + x.s);//验证成员变量值的改变</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 结果为：</p>
<blockquote>
<p>s = HelloWorld!<br>   1 -&gt; this.s = Hello<br>   2 -&gt; this.s = HelloWorld!<br>   s=HelloWorld!     </p>
</blockquote>
<h4 id="2-把自己当作参数传递时，也可以用this-this作当前参数进行传递"><a href="#2-把自己当作参数传递时，也可以用this-this作当前参数进行传递" class="headerlink" title="2.把自己当作参数传递时，也可以用this.(this作当前参数进行传递)"></a>2.把自己当作参数传递时，也可以用this.(this作当前参数进行传递)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">    public A() &#123;</div><div class="line">       new B(this).print();// 调用B的方法</div><div class="line">    &#125;</div><div class="line">    public void print() &#123;</div><div class="line">       System.out.println(&quot;HelloAA from A!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class B &#123;</div><div class="line">    A a;</div><div class="line">    public B(A a) &#123;</div><div class="line">       this.a = a;</div><div class="line">    &#125;</div><div class="line">    public void print() &#123;</div><div class="line">       a.print();//调用A的方法</div><div class="line">       System.out.println(&quot;HelloAB from B!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class HelloA &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       A aaa = new A();</div><div class="line">       aaa.print();</div><div class="line">       B bbb = new B(aaa);</div><div class="line">       bbb.print();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果为：<br>HelloAA from A!<br>HelloAB from B!<br>HelloAA from A!<br>HelloAA from A!<br>HelloAB from B!</p>
</blockquote>
<h4 id="3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。"><a href="#3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。" class="headerlink" title="3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。"></a>3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class HelloB &#123;</div><div class="line">    int i = 1;</div><div class="line"> </div><div class="line">    public HelloB() &#123;</div><div class="line">       Thread thread = new Thread() &#123;</div><div class="line">           public void run() &#123;</div><div class="line">              for (int j=0;j&lt;20;j++) &#123;</div><div class="line">                  HelloB.this.run();//调用外部类的方法</div><div class="line">                  try &#123;</div><div class="line">                     sleep(1000);</div><div class="line">                  &#125; catch (InterruptedException ie) &#123;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;; // 注意这里有分号</div><div class="line">       thread.start();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void run() &#123;</div><div class="line">       System.out.println(&quot;i = &quot; + i);</div><div class="line">       i++;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">       new HelloB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>thread 是一个匿名类对象，在它的定义中，它的 run 函数里用到了外部类的 run 函数。这时由于函数同名，直接调用就不行了。这时有两种办法，一种就是把外部的 run 函数换一个名字，但这种办法对于一个开发到中途的应用来说是不可取的。那么就可以用这个例子中的办法用外部类的类名加上 this 引用来说明要调用的是外部类的方法 run。</p>
<h4 id="4-在构造函数中，调用本类的另一个构造函数。可以使用this调用"><a href="#4-在构造函数中，调用本类的另一个构造函数。可以使用this调用" class="headerlink" title="4.在构造函数中，调用本类的另一个构造函数。可以使用this调用"></a>4.在构造函数中，调用本类的另一个构造函数。可以使用this调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ThisTest &#123;</div><div class="line">    private int age;</div><div class="line">    private String str;</div><div class="line"> </div><div class="line">    ThisTest(String str) &#123;</div><div class="line">       this.str=str;</div><div class="line">       System.out.println(str);</div><div class="line">    &#125;</div><div class="line">    ThisTest(String str,int age) &#123;</div><div class="line">       this(str);</div><div class="line">       this.age=age;</div><div class="line">       System.out.println(age);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       ThisTest thistest = new ThisTest(&quot;this测试成功&quot;,25);</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果为：<br>this测试成功<br>25</p>
</blockquote>
<p><strong>值得注意的是：</strong><br>　　1：在构造函数中调用另一个构造函数，调用动作必须置于最起始的位置。<br>　　2：不能在构造函数以外的任何函数内调用构造函数。<br>　　3：在一个构造函数内只能调用一个构造函数。<br>　　4：不能通过this递归调用构造方法，即不能在一个构造方法中通过this直接或间接调用该构造方法本身。</p>
<h4 id="5．this同时传递多个参数。"><a href="#5．this同时传递多个参数。" class="headerlink" title="5．this同时传递多个参数。"></a>5．this同时传递多个参数。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class TestClass &#123;</div><div class="line">    int x;</div><div class="line">    int y;</div><div class="line"> </div><div class="line">    static void showtest(TestClass tc) &#123;//实例化对象</div><div class="line">       System.out.println(tc.x + &quot; &quot; + tc.y);</div><div class="line">    &#125;</div><div class="line">    void seeit() &#123;</div><div class="line">       showtest(this);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       TestClass p = new TestClass();</div><div class="line">       p.x = 9;</div><div class="line">       p.y = 10;</div><div class="line">       p.seeit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-super和this的异同"><a href="#6-super和this的异同" class="headerlink" title="6.super和this的异同"></a>6.super和this的异同</h4><p>super在一个类中用来引用其父类的成员，它是在子类中访问父类成员的一个桥梁，并不是任何一个对象的引用，而this则表示当前类对象的引用。在代码中Object o = super;是错误的，Object o = this;则是允许的。<br>super关键字的作用在于当子类中覆盖了父类的某个成员变量，或者重写了父类的某个成员方法时还能够访问到父类的成员变量和成员方法。如果子类中没有重写父类的成员变量和成员方法，则子类会继承父类的所有非private的成员变量和成员方法。这时在子类中无论通过this来访问成员和通过super来访问成员，结果都是一样的。    </p>
<h4 id="super-getClass-和this-getClass"><a href="#super-getClass-和this-getClass" class="headerlink" title="super.getClass()和this.getClass()"></a>super.getClass()和this.getClass()</h4><p>getClass()是Object类定义的一个final方法，所有Java类的getClass()都继承自Object类。如前文所述，如果子类没有重写父类的某个成员方法，那么通过super来访问还是还是通过this来访问结果都是一样的。因此，super.getClass()和this.getClass()结果是一样的。Object类的getClass()方法返回的是该对象的运行时类，一个对象的运行时类是该对象通过new创建时指定的类。因此，super.getClass()和this.getClass()返回的都是new对象时指定的类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《八阵图》–杜甫&lt;br&gt;功盖三分国，名成八阵图。&lt;br&gt;江流石不转，遗恨失吞吴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-成员变量和局部变量重
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Python核心编程》学习笔记03（Python对象）</title>
    <link href="http://suxianglun.github.io/2017/05/05/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%EF%BC%88Python%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/05/Python核心编程》学习笔记03（Python对象）/</id>
    <published>2017-05-05T08:52:32.000Z</published>
    <updated>2017-07-25T06:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p> 宿建德江<br>唐代：孟浩然<br>移舟泊烟渚，日暮客愁新。<br>野旷天低树，江清月近人。</p>
</blockquote>
</blockquote>
<h3 id="1-标准类型内建函数"><a href="#1-标准类型内建函数" class="headerlink" title="1.标准类型内建函数"></a>1.标准类型内建函数</h3><h4 id="1-type"><a href="#1-type" class="headerlink" title="1.type()"></a>1.type()</h4><p>type()接受一个对象参数，返回该对象的类型。它的返回值是一个对象的类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; type(4)     # int type    </div><div class="line">&lt;type &apos;int&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="2-cmp"><a href="#2-cmp" class="headerlink" title="2.cmp()"></a>2.cmp()</h4><p>内建函数cmp(obj1,obj2)用来比较两个对象obj1和obj2的大小，如果obj1比obj2小的话，返回负整数，如果obj1比obj2大的话，返回正整数，如果obj1等于obj2小的话，返回0，比较是在对象之间进行的，不管是标准类型对象还是用户自定 义对象。如果是用户自定义对象， cmp()会调用该类的特殊方法<strong>cmp</strong>()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a, b = -4, 12     </div><div class="line"></div><div class="line">&gt;&gt;&gt; cmp(a,b)     </div><div class="line">-1    </div><div class="line">&gt;&gt;&gt; cmp(b,a)  </div><div class="line">  1    </div><div class="line">&gt;&gt;&gt; b = -4    &gt;&gt;&gt; cmp(a,b)    0    &gt;&gt;&gt;    &gt;&gt;&gt; a, b = &apos;abc&apos;, &apos;xyz&apos;    &gt;&gt;&gt; cmp(a,b)    -23    &gt;&gt;&gt; cmp(b,a)    23    &gt;&gt;&gt; b = &apos;abc&apos;    &gt;&gt;&gt; cmp(a,b)    0</div></pre></td></tr></table></figure>
<h4 id="3-str-和-repr-及-运算符"><a href="#3-str-和-repr-及-运算符" class="headerlink" title="3.str()和 repr() (及 `` 运算符)"></a>3.str()和 repr() (及 `` 运算符)</h4><p>str()函数得到的字符串可读性好， 而 repr()函数得到的字符 串通常可以用来重新获得该对象, 通常情况下 obj == eval(repr(obj)) 这个等式是成立的。事实上 repr() 和 “” 做的 是完全一样的事情，它们返回的是一个对象的“官方”字符串表示，但 str()则有所不同。str() 致力 于生成一个对象的可读性好的字符串表示，它的返回结果通常无法用于 eval()求值， 但很适 合用于 print 语句输出。</p>
<h4 id="4-type-和-isinstance"><a href="#4-type-和-isinstance" class="headerlink" title="4.type() 和 isinstance()"></a>4.type() 和 isinstance()</h4><p>在Python中可以使用type()与isinstance()这两个函数判断对象类型，而isinstance()函数的使用上比type更加方便。区别就是 对于subclass之类的 type就不行了，所以,强烈建议不要使用type判断对象类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  class A:</div><div class="line">   pass</div><div class="line"></div><div class="line">class B(A):</div><div class="line">   pass</div><div class="line"></div><div class="line">isinstance(A(), A)  # returns True</div><div class="line">type(A()) == A      # returns True</div><div class="line">isinstance(B(), A)    # returns True</div><div class="line">type(B()) == A        # returns False</div></pre></td></tr></table></figure>
<h3 id="2-标准类型分布"><a href="#2-标准类型分布" class="headerlink" title="2.标准类型分布"></a>2.标准类型分布</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:right">存储模型</th>
<th style="text-align:center">更新模型</th>
<th style="text-align:center">访问模型</th>
</tr>
</thead>
<tbody>
<tr>
<td>数字</td>
<td style="text-align:right">标量</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">直接访问</td>
</tr>
<tr>
<td>字符串</td>
<td style="text-align:right">标量</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">顺序访问</td>
</tr>
<tr>
<td>列表</td>
<td style="text-align:right">容器</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">顺序访问</td>
</tr>
<tr>
<td>元祖</td>
<td style="text-align:right">容器</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">顺序访问</td>
</tr>
<tr>
<td>字典</td>
<td style="text-align:right">容器</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">映射访问</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 宿建德江&lt;br&gt;唐代：孟浩然&lt;br&gt;移舟泊烟渚，日暮客愁新。&lt;br&gt;野旷天低树，江清月近人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-标准类
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python核心编程》学习笔记02（Python基础）</title>
    <link href="http://suxianglun.github.io/2017/05/05/%E3%80%8APython%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%EF%BC%88Python%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/05/《Python核心编程》学习笔记02（Python基础）/</id>
    <published>2017-05-05T07:25:11.000Z</published>
    <updated>2017-07-24T07:43:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>《哥舒歌》–西鄙人<br>北斗七星高，哥舒夜带刀。<br>至今窥牧马，不敢过临洮。</p>
</blockquote>
</blockquote>
<h3 id="1-模块结构和布局"><a href="#1-模块结构和布局" class="headerlink" title="1.模块结构和布局"></a>1.模块结构和布局</h3><p>合理的布局结构应该如下：</p>
<blockquote>
<p>1、起始行：通常只有在类 Unix 环境下才使用起始行，有起始行就能够仅输入脚本名字来执行脚本，无需直接调用解释器。     </p>
<p>2、模块文档：简要介绍模块的功能及重要全局变量的含义,模块外可通过 module.<strong>doc</strong> 访问这些内容。    </p>
<p>3、模块导入：导入当前模块的代码需要的所有模块;每个模块仅导入一次(当前模块被加载时);函数<br>内部的模块导入代码不会被执行， 除非该函数正在执行。    </p>
<p>4、定义变量：这里定义的变量为全局变量，本模块中的所有函数都可直接使用。从好的编程风格角度说， 除非必须，否则就要尽量使用局部变量代替全局变量，如果坚持这样做，你的代码就不但容易<br>维护，而且还可以 高性能并节省内存。    </p>
<p>5、类定义语句：<br>所有的类都需要在这里定义。当模块被导入时 class 语句会被执行, 类也就会被定义。类 的文档变量是 class.<strong>doc</strong>。</p>
<p>6、方法语句：<br> 此处定义的函数可以通过 module.function()在外部被访问到，当模块被导入时 def 语句 会被执行， 函数也就都会定义好，函数的文档变量是 function.<strong>doc</strong>。</p>
<p>7、主程序：无论这个模块是被别的模块导入还是作为脚本直接执行，都会执行这部分代码。通常这里 不会有太多功能性代码，而是根据执行的模式调用不同的函数。</p>
</blockquote>
<h3 id="2-name-指示模块应如何被加载"><a href="#2-name-指示模块应如何被加载" class="headerlink" title="2. _ name _ 指示模块应如何被加载"></a>2. _ <em>name</em> _ 指示模块应如何被加载</h3><p>由于主程序代码无论模块是被导入还是被直接执行都会运行，我们必须知道模块如何决定 运行方向。一个应用程序可能需要导入另一个应用程序的一个模块，以便重用一些有用的代码 (否则就只能用拷贝粘贴那种非面向对象的愚蠢手段)。这种情况下，你只想访问那些位于其 它应用程序中的代码，而不是想运行那个应用程序。因此一个问题出现了，“Python 是否有 一种方法能在运行时检测该模块是被导入还是被直接执行呢?” 答案就是……(鼓声雷动)…..没错! <strong>name</strong> 系统变量就是正确答案。 </p>
<blockquote>
<p>如果模块是被导入， _ <em>name</em> <em> 的值为模块名字<br>如果模块是被直接执行， </em> <em>name</em> <em> 的值为 ‘</em> <em>main</em> _’    </p>
</blockquote>
<h3 id="3-变量和内存管理细节"><a href="#3-变量和内存管理细节" class="headerlink" title="3.变量和内存管理细节"></a>3.变量和内存管理细节</h3><p>主要包含以下几点：</p>
<blockquote>
<p>1、变量无须提前声明<br>2、变量无须制定类型类型<br>3、程序员无须关心内存管理<br>4、变量会被收回<br>5、del 语句能够直接释放资源</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《哥舒歌》–西鄙人&lt;br&gt;北斗七星高，哥舒夜带刀。&lt;br&gt;至今窥牧马，不敢过临洮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-模块结构和布局&quot;&gt;
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python核心编程》学习笔记01（Python起步）</title>
    <link href="http://suxianglun.github.io/2017/05/04/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%EF%BC%88Python%E8%B5%B7%E6%AD%A5%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/04/python核心编程学习笔记01（Python起步）/</id>
    <published>2017-05-04T05:52:13.000Z</published>
    <updated>2017-07-25T06:34:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p> 江雪<br>唐代：柳宗元<br>千山鸟飞绝，万径人踪灭。<br>孤舟蓑笠翁，独钓寒江雪。</p>
</blockquote>
</blockquote>
<h3 id="1-程序输出print语句及“HelloWorld-”"><a href="#1-程序输出print语句及“HelloWorld-”" class="headerlink" title="1.程序输出print语句及“HelloWorld!”"></a>1.程序输出print语句及“HelloWorld!”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; myString = &apos;Hello World!&apos; </div><div class="line">&gt;&gt;&gt; print myString</div><div class="line">  &apos;Hello World!&apos;</div><div class="line">&gt;&gt;&gt; myString</div><div class="line">  &apos;Hello World!&apos;</div></pre></td></tr></table></figure>
<h4 id="1-1-和-在print中的使用"><a href="#1-1-和-在print中的使用" class="headerlink" title="1.1._ 和 %在print中的使用"></a>1.1._ 和 %在print中的使用</h4><p>下划线(_)在解释器中有特别的含义，表示最后一个表达式的值。所以上面的代码执行之后， 下划线变量会包含字符串:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; _</div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<p>Python的print语句，与字符串格式运算符( %)结合使用，可实现字符串替换功能。%s 表示由一个字符串来替换，而%d 表示由一个整数来替换，另外一个很常用的就是%f。它表示由一个浮点数来替换。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print ‘%s is number %d !’ % (&apos;python&apos;, 1)</div><div class="line">python is number 1!</div></pre></td></tr></table></figure>
<h3 id="2-程序输入和内建函数raw-input"><a href="#2-程序输入和内建函数raw-input" class="headerlink" title="2.程序输入和内建函数raw_input()"></a>2.程序输入和内建函数raw_input()</h3><p>从用户那里得到数据输入的最容易的方法是使用 raw_input()内建函数。它读取标准输入，<br>并将读取到的数据赋值给指定的变量。     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user=raw_input(&apos;henter your name: &apos;)</div><div class="line">enter your name suxianglun</div></pre></td></tr></table></figure>
<p>内建函数 int()将数值字符串转换成整数值，这样才可以对它进行数学运算         </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num = raw_input(&apos;Now enter a number: &apos;)</div><div class="line">Now enter a number: 1024</div><div class="line">  &gt;&gt;&gt; print &apos;Doubling your number: %d&apos; % (int(num) * 2)</div><div class="line">  Doubling your number: 2048</div></pre></td></tr></table></figure>
<h3 id="3-使用help-函数获取帮助信息"><a href="#3-使用help-函数获取帮助信息" class="headerlink" title="3.使用help()函数获取帮助信息"></a>3.使用help()函数获取帮助信息</h3><p>help()在交互式解释器中获取帮助信息,在学习 Python 的过程中，如果需要得到一个生疏函数的帮助，只需要对它调用内建函数help()。通过用函数名作为 help()的参数就能得到相应的帮助信息,查看结束退出使用 ：wq进行退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; help(raw_input)</div><div class="line">Help on built-in function raw_input in module __builtin__:</div><div class="line">raw_input(...) raw_input([prompt]) -&gt; string</div></pre></td></tr></table></figure>
<h3 id="4-列表解析"><a href="#4-列表解析" class="headerlink" title="4. 列表解析"></a>4. 列表解析</h3><p>表示可以在一行中使用for循环将所得到的的值放在列表中     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; squared = [x ** 2 for x in range(4)]    </div><div class="line">   &gt;&gt;&gt; for i in squared:... print i0149</div></pre></td></tr></table></figure>
<p>列表解析可以做更复杂的事情    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;squared = [x ** 2 for x in range(8) if not x%2]</div><div class="line">&gt;&gt;&gt;for i in squared</div><div class="line">...print i</div><div class="line">0</div><div class="line">4</div><div class="line">16</div><div class="line">36</div></pre></td></tr></table></figure>
<h3 id="5-实用的函数"><a href="#5-实用的函数" class="headerlink" title="5.实用的函数"></a>5.实用的函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>dir([obj])</td>
<td>显示对象的属性，如果没有提供参数， 则显示全局变量的名字</td>
</tr>
<tr>
<td>help([obj])</td>
<td>以一种整齐美观的形式 显示对象的文档字符串， 如果没有提供任何参 数， 则会进入交互式帮助。   </td>
</tr>
<tr>
<td>int(obj)</td>
<td>将一个对象转换为整数    </td>
</tr>
<tr>
<td>len(obj)</td>
<td>返回对象的长度</td>
</tr>
<tr>
<td>open(fn, mode)</td>
<td>以 mode(‘r’ = 读， ‘w’= 写)方式打开一个文件名为 fn 的文件</td>
</tr>
<tr>
<td>range([[start,]stop[,step])</td>
<td>返回一个整数列表。起始值为 start, 结束值为 stop - 1; start 默认值为 0， step默认值为1。</td>
</tr>
<tr>
<td>raw_input(str)</td>
<td>等待用户输入一个字符串， 可以提供一个可选的参数 str 用作提示信 息。</td>
</tr>
<tr>
<td>str(obj)</td>
<td>将一个对象转换为字符串 </td>
</tr>
<tr>
<td>type(obj)</td>
<td>返回对象的类型(返回值本身是一个 type 对象!)</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 江雪&lt;br&gt;唐代：柳宗元&lt;br&gt;千山鸟飞绝，万径人踪灭。&lt;br&gt;孤舟蓑笠翁，独钓寒江雪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-程序输出p
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>URI和URL含义及其理解</title>
    <link href="http://suxianglun.github.io/2017/04/28/URL%E5%92%8CURI%E5%90%AB%E4%B9%89%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <id>http://suxianglun.github.io/2017/04/28/URL和URI含义及理解/</id>
    <published>2017-04-28T08:14:03.000Z</published>
    <updated>2017-07-24T07:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>按照惯例先吟诗一首：</p>
<blockquote>
<blockquote>
<p>   &lt;&lt;相思&gt;&gt;  –王维  </p>
<p>红豆生南国，春来发几枝。<br>  愿君多采撷，此物最相思。</p>
</blockquote>
</blockquote>
<h4 id="1、URI和URL含义："><a href="#1、URI和URL含义：" class="headerlink" title="1、URI和URL含义："></a>1、URI和URL含义：</h4><p>在理解URL之前先来看一下什么是URI    </p>
<h5 id="1-1-什么是URI？"><a href="#1-1-什么是URI？" class="headerlink" title="1.1 什么是URI？"></a>1.1 什么是URI？</h5><p>简单点说：URI就是<strong>通用资源标志符</strong>，不理解是吧，我第一次听说也是不理解。<br>进一步说：网络上的一些资源（文档、图片、音频、视频、程序等）都是有一些通用资源标识（Universal Resource Identifier， URI）进行定位的。也就是说如果你想要在网络上找到特定的这些资源，只需知道他们的URI，就可以进行定位，从而找到他们。  </p>
<p>通常情况下URI由三部分组成：       </p>
<blockquote>
<p><strong>1、访问资源的命名机制</strong><br><strong>2、存放资源的主机名</strong><br><strong>3、资源自身的名称，由路径表示</strong>    </p>
</blockquote>
<p>如下面的URI：<br><a href="http://www.jianshu.com/writer#/notebooks/9212154http://" target="_blank" rel="external">http://www.jianshu.com/writer#/notebooks/9212154http://</a><br>可以这样解读：    </p>
<blockquote>
<p>1、以http机制访问资源<br>2、存在以www.jianshu.com为名的主机上<br>3、资源路径为notebooks/9212154http://     </p>
</blockquote>
<h5 id="1-2什么是URL"><a href="#1-2什么是URL" class="headerlink" title="1.2什么是URL"></a>1.2什么是URL</h5><p>URL是URI的子集，它是Uniform Resource Locator的缩写，统一资源定位符”。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<br>URL的格式由三部分组成：    </p>
<blockquote>
<p>①第一部分是协议(或称为服务方式)。<br>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。<br>③第三部分是主机资源的具体地址，如目录和文件名等。<br>第一部分和第二部分用“://”符号隔开，<br>第二部分和第三部分用“/”符号隔开。<br>第一部分和第二部分是不可缺少的，第三部分有时可以省略。   </p>
</blockquote>
<h3 id="2、URL和URI的区别"><a href="#2、URL和URI的区别" class="headerlink" title="2、URL和URI的区别"></a>2、URL和URI的区别</h3><blockquote>
<p>URI的定义是：统一资源标识符；<br>URL的定义是：统一资源定位符。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照惯例先吟诗一首：&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;   &amp;lt;&amp;lt;相思&amp;gt;&amp;gt;  –王维  &lt;/p&gt;
&lt;p&gt;红豆生南国，春来发几枝。&lt;br&gt;  愿君多采撷，此物最相思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockq
    
    </summary>
    
      <category term="Web" scheme="http://suxianglun.github.io/categories/Web/"/>
    
    
      <category term="Web" scheme="http://suxianglun.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
