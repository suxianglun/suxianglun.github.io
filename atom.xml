<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏湘伦的Blog</title>
  <subtitle>多谢大爷赏脸来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suxianglun.github.io/"/>
  <updated>2017-04-28T08:18:33.000Z</updated>
  <id>http://suxianglun.github.io/</id>
  
  <author>
    <name>苏湘伦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://suxianglun.github.io/2017/04/28/URL%E5%92%8CURI%E5%90%AB%E4%B9%89%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <id>http://suxianglun.github.io/2017/04/28/URL和URI含义及理解/</id>
    <published>2017-04-28T08:14:03.000Z</published>
    <updated>2017-04-28T08:18:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URI和URL含义及理解"><a href="#URI和URL含义及理解" class="headerlink" title="URI和URL含义及理解"></a>URI和URL含义及理解</h2><h4 id="1、URI和URL含义："><a href="#1、URI和URL含义：" class="headerlink" title="1、URI和URL含义："></a>1、URI和URL含义：</h4><p>在理解URL之前先来看一下什么是URI    </p>
<h5 id="1-1-什么是URI？"><a href="#1-1-什么是URI？" class="headerlink" title="1.1 什么是URI？"></a>1.1 什么是URI？</h5><p>简单点说：URI就是<strong>通用资源标志符</strong>，不理解是吧，我第一次听说也是不理解。<br>进一步说：网络上的一些资源（文档、图片、音频、视频、程序等）都是有一些通用资源标识（Universal Resource Identifier， URI）进行定位的。也就是说如果你想要在网络上找到特定的这些资源，只需知道他们的URI，就可以进行定位，从而找到他们。  </p>
<p>通常情况下URI由三部分组成：       </p>
<blockquote>
<p><strong>1、访问资源的命名机制</strong><br><strong>2、存放资源的主机名</strong><br><strong>3、资源自身的名称，由路径表示</strong>    </p>
</blockquote>
<p>如下面的URI：<br><a href="http://www.jianshu.com/writer#/notebooks/9212154http://" target="_blank" rel="external">http://www.jianshu.com/writer#/notebooks/9212154http://</a><br>可以这样解读：    </p>
<blockquote>
<p>1、以http机制访问资源<br>2、存在以www.jianshu.com为名的主机上<br>3、资源路径为notebooks/9212154http://     </p>
</blockquote>
<h5 id="1-2什么是URL"><a href="#1-2什么是URL" class="headerlink" title="1.2什么是URL"></a>1.2什么是URL</h5><p>URL是URI的子集，它是Uniform Resource Locator的缩写，统一资源定位符”。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<br>URL的格式由三部分组成：    </p>
<blockquote>
<p>①第一部分是协议(或称为服务方式)。<br>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。<br>③第三部分是主机资源的具体地址，如目录和文件名等。<br>第一部分和第二部分用“://”符号隔开，<br>第二部分和第三部分用“/”符号隔开。<br>第一部分和第二部分是不可缺少的，第三部分有时可以省略。   </p>
</blockquote>
<h3 id="2、URL和URI的区别"><a href="#2、URL和URI的区别" class="headerlink" title="2、URL和URI的区别"></a>2、URL和URI的区别</h3><blockquote>
<p>URI的定义是：统一资源标识符；<br>URL的定义是：统一资源定位符。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;URI和URL含义及理解&quot;&gt;&lt;a href=&quot;#URI和URL含义及理解&quot; class=&quot;headerlink&quot; title=&quot;URI和URL含义及理解&quot;&gt;&lt;/a&gt;URI和URL含义及理解&lt;/h2&gt;&lt;h4 id=&quot;1、URI和URL含义：&quot;&gt;&lt;a href=&quot;#1
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何利用Hexo、GitHub pages从零开始创建个人博客</title>
    <link href="http://suxianglun.github.io/2017/04/19/howCreateMyBlog/"/>
    <id>http://suxianglun.github.io/2017/04/19/howCreateMyBlog/</id>
    <published>2017-04-19T01:19:42.000Z</published>
    <updated>2017-04-28T02:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不多说了，详情如下：</p>
<h3 id="一、系统环境配置："><a href="#一、系统环境配置：" class="headerlink" title="一、系统环境配置："></a>一、系统环境配置：</h3><p>要想利用Hexo、GitHub搭建个人博客，首先要安装Node.js、git：    </p>
<h4 id="1、Node-js安装："><a href="#1、Node-js安装：" class="headerlink" title="1、Node.js安装："></a>1、Node.js安装：</h4><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">下载Node.js</a>     </p>
<h4 id="或者通过如下命令安装："><a href="#或者通过如下命令安装：" class="headerlink" title="或者通过如下命令安装："></a>或者通过如下命令安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">  brew install node  #最新版的node.js的包中已经集成了npm包管理工具 </div><div class="line">```    </div><div class="line"></div><div class="line">#### 通过如下命令查看是否安装成功： </div><div class="line">   </div><div class="line">```   </div><div class="line">node -v    </div><div class="line">npm -v</div><div class="line">```  </div><div class="line"></div><div class="line">#### 2、Git安装及配置：</div><div class="line"></div><div class="line">[下载Git](https://git-scm.com/download/)  </div><div class="line"></div><div class="line">#### 或者通过如下命令安装：  </div><div class="line"></div><div class="line">```   </div><div class="line">brew install git          #Mac电脑使用brew安装    </div><div class="line">sudo apt-get install git  #Ubuntu系统使用这条命令安装</div><div class="line"></div><div class="line">```  </div><div class="line">配置详见另外一篇博客： [git安装与配置](https://git-scm.com/download/)  </div><div class="line"></div><div class="line">#### 3、Hexo安装：</div></pre></td></tr></table></figure>
<p>$ npm install hexo -g  #-g表示全局安装, npm默认为当前项目安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 如遇错误，请使用一下安装：</div></pre></td></tr></table></figure></p>
<p>$ npm install hexo –no-optional<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 验证是否成功安装：</div></pre></td></tr></table></figure></p>
<p>$ hexo -v<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">目前我用到的环境如下 ，出现类似如下环境说明hexo安装成功</div></pre></td></tr></table></figure></p>
<p>hexo-cli: 1.0.2<br>os: Darwin 16.4.0 darwin x64<br>http_parser: 2.7.0<br>node: 6.10.0<br>v8: 5.1.281.93<br>uv: 1.9.1<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>icu: 58.2<br>modules: 48<br>openssl: 1.0.2k</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 创建博客的根目录并切换到更目录下：</div></pre></td></tr></table></figure>
<p>$ mkdir myblog<br>$ cd myblog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 初始化myblog文件夹使其成为Hexo博客：</div></pre></td></tr></table></figure></p>
<p>$ hexo init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 自动根据当前目录下文件,生成静态网页：</div></pre></td></tr></table></figure></p>
<p>$ hexo generate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 运行本地服务：</div></pre></td></tr></table></figure></p>
<p>$ hexo server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 有必要提下Hexo常用的几个命令：</div></pre></td></tr></table></figure></p>
<p>$ hexo new “postName” #新建文章<br>$ hexo new page “pageName” #新建页面<br>$ hexo generate (或者hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo server (或者hexo s) 启动本地web服务，用于博客的预览<br>$ hexo deploy (或者hexo d) 部署播客到远端（比如github, coding等平台）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">####  常用简写：</div></pre></td></tr></table></figure>
<p>$ hexo n == hexo new<br>$ hexo g == hexo generate<br>$ hexo s == hexo server<br>$ hexo d == hexo deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">####  常用组合：</div></pre></td></tr></table></figure></p>
<p>$ hexo d -g #生成部署<br>$ hexo s -g #生成预览<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">通过hexo g生成静态文件和hexo s启动本地web服务后，现在我们打开&lt;http://localhost:4000/&gt; 就可以看到一篇内置的blog了。看到后是不是感觉很有成就感？反正我是这么认为的。</div><div class="line"></div><div class="line">####  二、Hexo主题设置</div><div class="line">默认的主题是landscape，这里以主题yilia为例进行说明。[Hexo中文官网：下载主题、配置详解](https://hexo.io/zh-cn/docs/)</div><div class="line"></div><div class="line">##### 安装主题</div></pre></td></tr></table></figure></p>
<p>$ hexo clean<br>$ git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 修改主题</div></pre></td></tr></table></figure></p>
<p>修改myblog目录下的_config.yml配置文件中的theme属性，将其设置为yilia。<br>并按照主题说明进行相关的配置，这点很重要，否则修改后的主题样式会有变化<br>例如：git clone <a href="https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题" target="_blank" rel="external">https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题</a><br>就需要在_config.yml配置文件添加如下内容：</p>
<h3 id="search插件基于-https-github-com-PaicHyperionDev-hexo-generator-search"><a href="#search插件基于-https-github-com-PaicHyperionDev-hexo-generator-search" class="headerlink" title="search插件基于 https://github.com/PaicHyperionDev/hexo-generator-search"></a>search插件基于 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">https://github.com/PaicHyperionDev/hexo-generator-search</a></h3><h3 id="使用说明请参考该repo"><a href="#使用说明请参考该repo" class="headerlink" title="使用说明请参考该repo"></a>使用说明请参考该repo</h3><p>search:<br>  path: search.xml<br>  field: all<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 更新主题</div></pre></td></tr></table></figure></p>
<p>$ hexo g # 生成<br>$ hexo s # 启动本地web服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 三、GitHub Pages配置</div><div class="line">#### 1、注册、登录GitHub </div><div class="line">github官网：&lt;https://github.com/&gt;</div><div class="line">![你值得拥有](https://ww4.sinaimg.cn/large/006tKfTcgy1fch0a9kz7aj31kw0z7npd.jpg)</div><div class="line">#### 2、创建项目仓库 </div><div class="line">注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。</div><div class="line">![你值得拥有](http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan20163281.png)</div><div class="line"> </div><div class="line">#### 3、填写项目名</div><div class="line">在Repository name中填写：**Github账号名.github.io 必须这样填，否则会出错 例如我的账号为:allen,那么就必须填allen.github.io**</div><div class="line">![你值得拥有](http://www.pchou.info/assets/img/build-github-blog-page-02-img0.png)</div><div class="line">#### 4、设置GitHub pages</div><div class="line">打开settings，有一个Github Pages 的设置，点击 source 中的本来的 None ，使其变成 master 分支，也就是作为部署github pages 的分支，然后点击 save。</div><div class="line">![你值得拥有](http://images2015.cnblogs.com/blog/903320/201701/903320-20170115212404385-1979000093.png)</div><div class="line">#### 5、查看网址</div><div class="line">页面刷新之后，再看 github pages 设置框处，多了一行网址，就是你的 github pages 的网址了，点击进去就进入属于你自己的博客网址了。</div><div class="line">![你值得拥有](http://images2015.cnblogs.com/blog/903320/201701/903320-20170115213630338-44375750.png)</div><div class="line"></div><div class="line">### 四、部署到GitHub pages</div><div class="line">#### 1、修改_config.yml</div><div class="line"></div><div class="line">千万要注意冒号：后边要留有空格    </div><div class="line"></div><div class="line">基本设置</div></pre></td></tr></table></figure></p>
<p>title: allen<br>subtitle: welcome to allen blog<br>description:<br>author: John Doe<br>language: zh-CN #语言<br>timezone:        #时区</p>
<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h2 id="If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child‘-and-root-as-‘-child-‘"><a href="#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child‘-and-root-as-‘-child-‘" class="headerlink" title="If your site is put in a subdirectory, set url as ‘http://yoursite.com/child‘ and root as ‘/child/‘"></a>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child" target="_blank" rel="external">http://yoursite.com/child</a>‘ and root as ‘/child/‘</h2><p>url: <a href="http://suxianglun.github.io">http://suxianglun.github.io</a>  #用于绑定域名, 其他的不需要配置，即为GitHub pages生成的那个网址<br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:</p>
<h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><h2 id="Plugins-https-hexo-io-plugins"><a href="#Plugins-https-hexo-io-plugins" class="headerlink" title="Plugins: https://hexo.io/plugins/"></a>Plugins: <a href="https://hexo.io/plugins/" target="_blank" rel="external">https://hexo.io/plugins/</a></h2><h2 id="Themes-https-hexo-io-themes"><a href="#Themes-https-hexo-io-themes" class="headerlink" title="Themes: https://hexo.io/themes/"></a>Themes: <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></h2><p>theme: hexo-theme-landfarz   #主题设置</p>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a></h2><p>deploy:   #部署, 发布在 GitHub 上面<br>  type: git<br>  repo: git@github.com:suxianglun/suxianglun.github.io.git #GitHub 项目仓库<br>  branch: master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 2、部署到GitHub 上</div></pre></td></tr></table></figure></p>
<p>$ hexo clean #清除<br>$ hexo g #生成<br>$ hexo d #部署 # 可与hexo g合并为 hexo d -g<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d 之后如果出现ERROR Deployer not found: Git,请键入如下命令</div></pre></td></tr></table></figure></p>
<p>$ npm install hexo-deployer-git –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">部署之后去查看GitHub pages那个网址http://suxianglun.github.io，有可能会出现:   </div><div class="line">Your site is having problems building: unable to build page. Please try again later. 或者</div><div class="line">Your page is having problems building: page build failed</div><div class="line">同时也会收到github发来的page build failure的邮件，但是邮件中显示的错误信息和settings页面上的一样, 就这句话, 什么都没有, 没有任何错误提示.我就卡在这一天，后来用了好长时间来解决了。我分析的主要原因如下：    </div><div class="line">1、Hexo未进行构建html,即未执行hexo g,这个过程需要一段时间，构建好html后myblog根目录下完整目录应该如下：</div></pre></td></tr></table></figure></p>
<p>README.md    db.json        package.json    scaffolds    themes<br>_config.yml    node_modules    public        source</p>
<p>```<br>2、Hexo 配置不正确，请严格按照要求进行配置</p>
<p>注意事项：<br>markdown标题标准写法写法需要在”#”和后面字符之间加一个空格<br>如果不加空格 有些引擎就解析不了    </p>
<p>另外说一下我的个人博客地址 <a href="https://suxianglun.github.io/">https://suxianglun.github.io/</a> 欢迎来骚扰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android studio下JNI开发</title>
    <link href="http://suxianglun.github.io/2017/04/05/Android%20studio%E4%B8%8BJNI%E5%92%8CNDK%E5%BC%80%E5%8F%91/"/>
    <id>http://suxianglun.github.io/2017/04/05/Android studio下JNI和NDK开发/</id>
    <published>2017-04-05T03:11:48.000Z</published>
    <updated>2017-04-28T02:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载Ndk并配置"><a href="#1-下载Ndk并配置" class="headerlink" title="1.下载Ndk并配置"></a>1.下载Ndk并配置</h3><p>点菜单栏的File-&gt;ProjectStructure…-&gt;在打开的窗口中左侧选中SDKLocation-&gt;<br>在右侧Android NDK Location中填入NDK目录所在路径，如下图所示：  </p>
<p><img src="http://img.blog.csdn.net/20160516224637401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20160516224841000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="2-新建项目JniDemo"><a href="#2-新建项目JniDemo" class="headerlink" title="2. 新建项目JniDemo"></a>2. 新建项目JniDemo</h3><h4 id="1-新建类JniUtil-声明所需要的native方法：getJniAdd-int-a-int-b-代码如下"><a href="#1-新建类JniUtil-声明所需要的native方法：getJniAdd-int-a-int-b-代码如下" class="headerlink" title="1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:"></a>1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:</h4><pre><code>public class JniUtil {
        static {
        System.loadLibrary(&quot;JniUtil&quot;);
    }

    public static native int getJniAdd(int a, int b);
}
</code></pre><h4 id="2-生成Java文件中native方法相对应的jin层c代码接口"><a href="#2-生成Java文件中native方法相对应的jin层c代码接口" class="headerlink" title="2. 生成Java文件中native方法相对应的jin层c代码接口"></a>2. 生成Java文件中native方法相对应的jin层c代码接口</h4><p>在AS界面的Terminal窗口中执行命令：cd app/src/main/java<br>定位至java文件夹，然后再执行命令：javah -jni com.richsoft.jnidemo.JniUtil<br>注意”com.richsoft.jnidemo”是JniUtil所在的包名。<br>此时在app/src/main/java路径下生成了一个.h文件，如图：   </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-b3c868adb09b54b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<h4 id="3-新建jni文件夹"><a href="#3-新建jni文件夹" class="headerlink" title="3.新建jni文件夹"></a>3.新建jni文件夹</h4><p>app-&gt;new-&gt;Floder-&gt;JNI Folder,如下图： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-60b3d9612e7a94b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点击之后弹出选择框：   </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-451c550875c3dd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>点击finish之后，main文件夹下生成jni文件夹，如下图：  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-206d517c3250e22b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<h4 id="4-实现项目中声明的Native方法"><a href="#4-实现项目中声明的Native方法" class="headerlink" title="4.实现项目中声明的Native方法"></a>4.实现项目中声明的Native方法</h4><p>在jni目录下创建JniUtil.c文件,然后将com_richsoft_jnidemo_JniUtil.h中的方法拷贝至JniUtil.c中，并实现这个方法，如下代码：   </p>
<pre><code>#include&lt;jni.h&gt;
JNIEXPORT jint JNICALL Java_com_richsoft_jnidemo_JniUtil_getJniAdd
        (JNIEnv *env, jclass cls, jint a, jint b) {
    return a + b;
}
</code></pre><h3 id="3-编译-so文件"><a href="#3-编译-so文件" class="headerlink" title="3.编译.so文件"></a>3.编译.so文件</h3><h4 id="1-gradle内添加代码："><a href="#1-gradle内添加代码：" class="headerlink" title="1.gradle内添加代码："></a>1.gradle内添加代码：</h4><p>在gradle.properties文件末尾添加上“android.useDeprecatedNdk=true”<br>然后在app文件下build.grade－&gt;defaultConfig括号内添加如下代码：   </p>
<pre><code>ndk {
            moduleName &quot;JniUtil&quot;          //生成的so名字
            abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; ,&quot;x86&quot;//输出指定三种abi体系结构下的so库，目前可有可无。
        }
</code></pre><h4 id="2-build-项目"><a href="#2-build-项目" class="headerlink" title="2.build 项目"></a>2.build 项目</h4><p>点击Build下的Make Project,成功之后打开app-&gt;intermediates-&gt;ndk-&gt;debug发现了四个文件夹,如下图： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-24939b37659a4c28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>到此，生成.so文件的过程结束。<br>在src\main下新建jniLibs文件夹，将上面的四个文件夹拷贝至jniLibs文件夹下，如图：</p>
<p>将jni文件夹和.h文件删除，如下图：    </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-3fee35f92cf1bb2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>最后咱们试试生成的.so文件能不能用，贴下MainActivity代码：  </p>
<pre><code>public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        TextView tv = (TextView) findViewById(R.id.tv);
        tv.setText(&quot;java调用C语言实现的加法运算:2+1000=&quot; + JniUtil.getJniAdd(2, 10000));
    }
}
</code></pre><p>运行下程序，结果如下：    </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-a9a4e1f1bff2e324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-下载Ndk并配置&quot;&gt;&lt;a href=&quot;#1-下载Ndk并配置&quot; class=&quot;headerlink&quot; title=&quot;1.下载Ndk并配置&quot;&gt;&lt;/a&gt;1.下载Ndk并配置&lt;/h3&gt;&lt;p&gt;点菜单栏的File-&amp;gt;ProjectStructure…-&amp;gt;在打
    
    </summary>
    
    
  </entry>
  
</feed>
