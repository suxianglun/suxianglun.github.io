<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏湘伦的Blog</title>
  <subtitle>求知若渴，虚怀若谷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suxianglun.github.io/"/>
  <updated>2017-07-24T07:14:48.000Z</updated>
  <id>http://suxianglun.github.io/</id>
  
  <author>
    <name>苏湘伦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python中range和xrange的区别</title>
    <link href="http://suxianglun.github.io/2017/07/24/python%E4%B8%ADrange%E5%92%8Cxrange%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://suxianglun.github.io/2017/07/24/python中range和xrange的区别/</id>
    <published>2017-07-24T06:26:20.000Z</published>
    <updated>2017-07-24T07:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="range-start-None-stop-None-step-None-函数说明："><a href="#range-start-None-stop-None-step-None-函数说明：" class="headerlink" title="range(start=None, stop=None, step=None)函数说明："></a>range(start=None, stop=None, step=None)函数说明：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Return a list containing an arithmetic progression of integers.     </div><div class="line">  	range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.</div><div class="line">    When step is given, it specifies the increment (or decrement).</div><div class="line">    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!</div><div class="line">    These are exactly the valid indices for a list of 4 elements.</div></pre></td></tr></table></figure>
<p>大致意思就是：range函数返回的是包含一个等差数列的整数列表，根据参数start与stop指定的范围以及step设定的差值，生成一个列表。 如果不指定step默认差值就是1，如果指定step，它指定递增(或递减)，差值就是step.如果不明白举个栗子，如果还不明白就举2个栗子。    </p>
<p>例子1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=range(0,10,2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[0, 2, 4, 6, 8]</div><div class="line">&lt;type &apos;list&apos;&gt;</div></pre></td></tr></table></figure>
<p>例子2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=range(0,-10,-2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[0, -2, -4, -6, -8]</div><div class="line">&lt;type &apos;list&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="xrange-函数说明：和range-的用法完全相同，但是返回的是一个生成器。"><a href="#xrange-函数说明：和range-的用法完全相同，但是返回的是一个生成器。" class="headerlink" title="xrange 函数说明：和range 的用法完全相同，但是返回的是一个生成器。"></a>xrange 函数说明：和range 的用法完全相同，但是返回的是一个生成器。</h4><p>例子1：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=xrange(0,10,2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[xrange(0, 10, 2)</div><div class="line">&lt;type &apos;xrange&apos;&gt;</div></pre></td></tr></table></figure>
<p>例子2：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=xrange(0,-10,-2)</div><div class="line">print a</div><div class="line">print type(a)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xrange(0, -10, -2)</div><div class="line">&lt;type &apos;xrange&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="range和xrange区别："><a href="#range和xrange区别：" class="headerlink" title="range和xrange区别："></a>range和xrange区别：</h4><p>两个都是在循环迭代的时候使用，range返回的是个list,xrange返回的是xrange对象，生成很小的数字序列时候性能没什么区别，但是要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间。如果你不是为了要返回一个list,在循环中尽量使用xrange。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;range-start-None-stop-None-step-None-函数说明：&quot;&gt;&lt;a href=&quot;#range-start-None-stop-None-step-None-函数说明：&quot; class=&quot;headerlink&quot; title=&quot;range(st
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python PIL库安装</title>
    <link href="http://suxianglun.github.io/2017/07/05/Python%20pIL%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>http://suxianglun.github.io/2017/07/05/Python pIL库安装/</id>
    <published>2017-07-05T08:01:16.000Z</published>
    <updated>2017-07-24T06:55:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于需要使用Python操作图片，想使用<strong>sudo pip install PIL</strong>引入PIL(Python Imaging Library)库，但是结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">could not find a version that satisfies the requirement PIL.(form versions:)</div><div class="line">No matching distribution found for PIL.</div></pre></td></tr></table></figure>
<p>这个提示很费解，只能去找度娘了，原来已经用Pillow代替了PIL，在使用方面没有不同，API都是相同的。真是个挨千刀的，提示信息里怎么不告诉我们这些刚学Python的小白呢，还得白忙活半天。既然这样那就老老实实安装Pillow吧。但是又发现Pillow需要依赖multiprocessing，所以必须先安装multiprocessing。命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install multiprocessing</div></pre></td></tr></table></figure>
<p>接着再执行如下命令：   </p>
<pre><code>sudo pip install Pillow
</code></pre><p>引入模块要按照下面的方式写（注意大小写）<br>第一种：from PIL import Image<br>第二种：from PIL.Image(用这种方式时，下面使用时也得写成PIL.Image.open(‘1.png’)，或者可以在引入时修改下模块名，如from PIL.Image as image)</p>
<p>引入之后就可以正常使用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于需要使用Python操作图片，想使用&lt;strong&gt;sudo pip install PIL&lt;/strong&gt;引入PIL(Python Imaging Library)库，但是结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之join()</title>
    <link href="http://suxianglun.github.io/2017/06/01/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8Bjoin()/"/>
    <id>http://suxianglun.github.io/2017/06/01/Java线程常用方法之join()/</id>
    <published>2017-06-01T08:10:06.000Z</published>
    <updated>2017-06-01T08:14:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>join()方法的作用是等待线程销毁。例如在main线程新起一个子线程，子线程需要做一些耗时造作，main线程想要得到子线程执行完成的数据，就必须等到执行完子线程再去执行，这时候就可以用join来解决。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyThread04 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try&#123;</div><div class="line">            int value=(int)(Math.random()*1000);</div><div class="line">            System.out.println(&quot;thread04 value=&quot;+value);</div><div class="line">            Thread.sleep(value);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>YieldTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class JoinTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread04 thread04=new MyThread04();</div><div class="line">        thread04.start();</div><div class="line">//        try &#123;</div><div class="line">//            thread04.join();</div><div class="line">//        &#125;catch (InterruptedException e)&#123;</div><div class="line">//            e.printStackTrace();</div><div class="line">//        &#125;</div><div class="line">        System.out.println(&quot;我想在thread04之后执行&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>我想在thread04之后执行<br>thread04 value=8</p>
</blockquote>
</blockquote>
<p>从结果上看，主线程和子线程是异步的，并没有在子线程执行完之后才执行，而是在子线程执行过程中就执行了主线程。如果想要实现同步的话，需要用到join()方法</p>
<p>将MyThread03类更改一下    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class JoinTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread04 thread04=new MyThread04();</div><div class="line">        thread04.start();</div><div class="line">        try &#123;</div><div class="line">            thread04.join();</div><div class="line">           </div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">		 System.out.println(&quot;我想在thread04之后执行&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：    </p>
<blockquote>
<blockquote>
<p>thread04 value=323<br>我想在thread04之后执行</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;join()方法的作用是等待线程销毁。例如在main线程新起一个子线程，子线程需要做一些耗时造作，main线程想要得到子线程执行完成的数据，就必须等到执行完子线程再去执行，这时候就可以用join来解决。&lt;/p&gt;
&lt;h4 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; c
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之yield()</title>
    <link href="http://suxianglun.github.io/2017/06/01/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8Byield()/"/>
    <id>http://suxianglun.github.io/2017/06/01/Java线程常用方法之yield()/</id>
    <published>2017-06-01T07:41:19.000Z</published>
    <updated>2017-06-01T08:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>yield()方法的作用是让当前线程放弃当前cup资源，让其他任务获取cup资源。但放弃的时间不确定，有可能放放弃又马上获取cpu资源。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyThread03 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        long beginTime=System.currentTimeMillis();</div><div class="line">        int count=0;</div><div class="line">        for (int i=0;i&lt;50000000;i++)&#123;</div><div class="line">//            Thread.yield();</div><div class="line">            count=count+(i+1);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        long endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;用时=&quot;+(endTime-beginTime)+&quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>YieldTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class YieldTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread03 thread03=new MyThread03();</div><div class="line">        thread03.start();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>用时=23毫秒</p>
</blockquote>
</blockquote>
<p>将MyThread03类更改一下    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class MyThread03 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        long beginTime=System.currentTimeMillis();</div><div class="line">        int count=0;</div><div class="line">        for (int i=0;i&lt;50000000;i++)&#123;</div><div class="line">            Thread.yield();</div><div class="line">            count=count+(i+1);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        long endTime=System.currentTimeMillis();</div><div class="line">        System.out.println(&quot;用时=&quot;+(endTime-beginTime)+&quot;毫秒&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：    </p>
<blockquote>
<blockquote>
<p>用时=10552毫秒</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;yield()方法的作用是让当前线程放弃当前cup资源，让其他任务获取cup资源。但放弃的时间不确定，有可能放放弃又马上获取cpu资源。&lt;/p&gt;
&lt;h4 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之sleep()</title>
    <link href="http://suxianglun.github.io/2017/06/01/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8Bsleep()%20/"/>
    <id>http://suxianglun.github.io/2017/06/01/Java线程常用方法之sleep() /</id>
    <published>2017-06-01T07:25:55.000Z</published>
    <updated>2017-06-01T08:14:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>sleep()方法的作用是在指定的毫秒数中让当前运行的线程休眠，当前的线程指的是this.currentTread() </p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class  MyThread02 extends Thread&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            System.out.println(&quot;Thread name:&quot;+Thread.currentThread().getName()+&quot;begin=&quot;+System.currentTimeMillis());</div><div class="line">            Thread.sleep(2000);</div><div class="line">            System.out.println(&quot;Thread name:&quot;+Thread.currentThread().getName()+&quot;end=&quot;+System.currentTimeMillis());</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>SleepTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class SleepTest &#123;</div><div class="line">    public  static void main(String[] args)&#123;</div><div class="line">        MyThread02 thread02=new MyThread02();</div><div class="line">        System.out.println(&quot;Begin&quot;);</div><div class="line">        thread02.start();</div><div class="line">        System.out.println(&quot;end&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>Begin<br>end<br>Thread name:Thread-0begin=1496281723821<br>Thread name:Thread-0end=1496281725822   </p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sleep()方法的作用是在指定的毫秒数中让当前运行的线程休眠，当前的线程指的是this.currentTread() &lt;/p&gt;
&lt;h4 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之isAlive()</title>
    <link href="http://suxianglun.github.io/2017/05/27/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8BisAlive()/"/>
    <id>http://suxianglun.github.io/2017/05/27/Java线程常用方法之isAlive()/</id>
    <published>2017-05-27T08:49:30.000Z</published>
    <updated>2017-06-01T08:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇主要来了解一下isAlive()方法，此方法返回当前线程是否处于“活动状态”，何为“活动状态”，线程已经启动尚未终止。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class MyThread01 extends Thread&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;Name:&quot;+Thread.currentThread().getName());</div><div class="line">        System.out.println(&quot;state:&quot;+Thread.currentThread().isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>IsAliveTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class IsAliveTest &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        MyThread01 thread01=new MyThread01();</div><div class="line">        System.out.println(&quot;begin:&quot;+thread01.isAlive());</div><div class="line">        thread01.start();</div><div class="line">        System.out.println(&quot;end:&quot;+thread01.isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>begin:false<br>end:true<br>Name:Thread-0<br>state:true </p>
</blockquote>
</blockquote>
<p>将IsAliveTest类改为如下：     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class IsAliveTest &#123;</div><div class="line">    public static void main(String [] args)&#123;</div><div class="line">        MyThread01 thread01=new MyThread01();</div><div class="line">        System.out.println(&quot;begin:&quot;+thread01.isAlive());</div><div class="line">        thread01.start();</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000);</div><div class="line">        &#125;catch (InterruptedException e)&#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;end:&quot;+thread01.isAlive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<blockquote>
<p>begin:false<br>Name:Thread-0<br>state:true<br>end:false</p>
</blockquote>
</blockquote>
<p>调用Thread.sleep(1000)让主线程休眠1秒，在这1秒内Thread-0线程已经执行完毕，再调用isAlive()时返回false</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇主要来了解一下isAlive()方法，此方法返回当前线程是否处于“活动状态”，何为“活动状态”，线程已经启动尚未终止。&lt;/p&gt;
&lt;h4 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程常用方法之currentThread（）</title>
    <link href="http://suxianglun.github.io/2017/05/27/Java%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%B9%8BcurrentThread()/"/>
    <id>http://suxianglun.github.io/2017/05/27/Java线程常用方法之currentThread()/</id>
    <published>2017-05-27T08:35:30.000Z</published>
    <updated>2017-05-27T08:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java线程中有很多常用的方法，需要花费一些时间来理解，今天就先来学习一下currentThread（）方法。<br>currentThread（）方法返回调用此代码段的线程信息，其中可以通过     Thread.currentThread().getId()获取当前线程id<br>Thread.currentThread().getName()获取当前线程name<br>Thread.currentThread().getPriority()获取当前线程优先级     </p>
<p>下面用代码来说明：    </p>
<p><strong>MyThread类</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class MyThread extends Thread&#123;</div><div class="line">    public  MyThread()&#123;</div><div class="line">        System.out.println(&quot;构造方法中打印的线程名字：&quot;+Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;run方法中打印的线程名字：&quot;+Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>CurrentThreadTest类</strong>     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class CurrentThreadTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[ ]args)&#123;</div><div class="line">        Thread thread=new MyThread();</div><div class="line">        thread.start();</div><div class="line">//        thread.run();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：     </p>
<blockquote>
<blockquote>
<p>构造方法中打印的线程名字：main<br>run方法中打印的线程名字：Thread-0  </p>
</blockquote>
</blockquote>
<p>说明MyThread类的构造方法被main线程调用的，run方法是自动调用的方法。</p>
<p>将CurrentThreadTest类改为如下：     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class CurrentThreadTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[ ]args)&#123;</div><div class="line">        Thread thread=new MyThread();</div><div class="line">//        thread.start();</div><div class="line">        thread.run();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<blockquote>
<p>构造方法中打印的线程名字：main<br>run方法中打印的线程名字：main     </p>
</blockquote>
</blockquote>
<p>说明MyThread类的构造方法被main线程调用的，run方法是被main线程调用的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java线程中有很多常用的方法，需要花费一些时间来理解，今天就先来学习一下currentThread（）方法。&lt;br&gt;currentThread（）方法返回调用此代码段的线程信息，其中可以通过     Thread.currentThread().getId()获取当前线程
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程的五种状态</title>
    <link href="http://suxianglun.github.io/2017/05/26/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%20/"/>
    <id>http://suxianglun.github.io/2017/05/26/Java线程的状态 /</id>
    <published>2017-05-26T09:34:36.000Z</published>
    <updated>2017-05-27T01:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是线程："><a href="#什么是线程：" class="headerlink" title="什么是线程："></a>什么是线程：</h4><p>一个线程是进程的一个顺序执行流。同类的多个线程共享一块内存空间和一组系统资源，一个进程中可以包含多个线程。    </p>
<h4 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h4><p>一个进程至少有一个线程。线程的划分尺度小于进程，使得多线程程序的并发性高。另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p><img src="http://pdf7.tarena.com.cn/tts8_source/ttsPage/JAVA/JSD_N_V06/JAVASE02/DAY04/SUPERDOC/01/index.files/image001.png" alt=""></p>
<h5 id="新建状态"><a href="#新建状态" class="headerlink" title="新建状态"></a>新建状态</h5><p>当用new操作符创建一个线程时。此时程序还没有开始运行线程中的代码。</p>
<h5 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h5><p>个新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当线程对象调用start()方法即启动了线程，start()方法创建线程运行的系统资源，并调度线程运行run()方法。当start()方法返回后，线程就处于就绪状态。</p>
<p>处于就绪状态的线程并不一定立即运行run()方法，线程还必须同其他线程竞争CPU时间，只有获得CPU时间才可以运行线程。因为在单CPU的计算机系统中，不可能同时运行多个线程，一个时刻仅有一个线程处于运行状态。因此此时可能有多个线程处于就绪状态。对多个处于就绪状态的线程是由Java运行时系统的线程调度程序来调度的。</p>
<h5 id="运行状态（Running）"><a href="#运行状态（Running）" class="headerlink" title="运行状态（Running）"></a>运行状态（Running）</h5><p>当线程获得CPU时间后，它才进入运行状态，真正开始执行run()方法。</p>
<h5 id="阻塞状态（blocked）"><a href="#阻塞状态（blocked）" class="headerlink" title="阻塞状态（blocked）"></a>阻塞状态（blocked）</h5><p>线程运行过程中，可能由于各种原因进入阻塞状态：</p>
<p>①线程通过调用sleep方法进入睡眠状态；</p>
<p>②线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者；</p>
<p>③线程试图得到一个锁，而该锁正被其他线程持有；</p>
<p>④线程在等待某个触发条件；</p>
<p>所谓阻塞状态是正在运行的线程没有运行结束，暂时让出CPU，这时其他处于就绪状态的线程就可以获得CPU时间，进入运行状态。</p>
<h5 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h5><p>有两个原因会导致线程死亡：</p>
<p>①run方法正常退出而自然死亡；</p>
<p>②一个未捕获的异常终止了run方法而使线程猝死；</p>
<p>为了确定线程在当前是否存活着（就是要么是可运行的，要么是被阻塞了），需要使用isAlive方法，如果是可运行或被阻塞，这个方法返回true；如果线程仍旧是new状态且不是可运行的，或者线程死亡了，则返回false。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是线程：&quot;&gt;&lt;a href=&quot;#什么是线程：&quot; class=&quot;headerlink&quot; title=&quot;什么是线程：&quot;&gt;&lt;/a&gt;什么是线程：&lt;/h4&gt;&lt;p&gt;一个线程是进程的一个顺序执行流。同类的多个线程共享一块内存空间和一组系统资源，一个进程中可以包含多个线程。 
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin中val 和var的区别</title>
    <link href="http://suxianglun.github.io/2017/05/24/Kotlin%E4%B8%ADval%20%E5%92%8Cvar%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://suxianglun.github.io/2017/05/24/Kotlin中val 和var的区别/</id>
    <published>2017-05-24T07:25:28.000Z</published>
    <updated>2017-05-24T07:51:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天朋友圈刷爆了关于Kotlin成为Android官方语言的新闻，为了体验一下，开始学习Kotlin的基础语法。其中Kotlin中有两个关键字定义变量var和val,区别如下：    </p>
<p><strong>var：</strong> var是一个可变变量，这是一个可以通过重新分配来更改为另一个值的变量。这种声明变量的方式和Java中声明变量的方式一样。<br><strong>val:</strong>  val是一个只读变量，这种声明变量的方式相当于java中的final变量。一个val创建的时候必须初始化，因为以后不能被改变。</p>
<p>上段代码体验一下：</p>
<pre><code>var name = &quot;lao wang&quot;
println(name)
name = &quot;xiao wang&quot;
println(name)
val finalValue = &quot;我万年不变的老李&quot;;
println(finalValue);
</code></pre><p>结果如下：</p>
<blockquote>
<p>lao wang<br>xiao wang<br>我万年不变的老李</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天朋友圈刷爆了关于Kotlin成为Android官方语言的新闻，为了体验一下，开始学习Kotlin的基础语法。其中Kotlin中有两个关键字定义变量var和val,区别如下：    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;var：&lt;/strong&gt; var是一个可变变量，这是一
    
    </summary>
    
      <category term="Kotlin" scheme="http://suxianglun.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://suxianglun.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>flask_restful安装遇到的问题</title>
    <link href="http://suxianglun.github.io/2017/05/15/%E5%AE%89%E8%A3%85%20Flask-RESTful%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://suxianglun.github.io/2017/05/15/安装 Flask-RESTful遇到的问题/</id>
    <published>2017-05-15T09:40:16.000Z</published>
    <updated>2017-05-24T07:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-使用-pip-安装-Flask-RESTful"><a href="#1-使用-pip-安装-Flask-RESTful" class="headerlink" title="1.使用 pip 安装 Flask-RESTful:"></a>1.使用 pip 安装 Flask-RESTful:</h4><blockquote>
<p>pip install flask-restful</p>
</blockquote>
<p>使用pip安装第三方库总是提示：You are using pip version 8.0.2, however version 8.1.0 is available</p>
<p>且输入“python -m pip install -U pip”升级pip版本命名还是报同样的错误。 </p>
<p><strong>解决办法：</strong><br>  <strong>第一步：</strong>使用PyCharm，选择file→Setting，找到pip 双击<br>  <img src="http://www.chenxm.cc/zb_users/upload/2016/07/201607221469181275894919.jpg" alt="">     </p>
<p>  <strong>第二步：</strong>按照图片，点击pip，勾选specify version，然后点击 install package<br>  <img src="http://www.chenxm.cc/zb_users/upload/2016/07/201607221469181275770256.jpg" alt=""></p>
<p>  <strong>第三步：</strong>如果安装出现连接不成功，请使用VPN；<br>  如果出现报错：“UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xd7 in position 9: ordinal not in range(128)”请修改mimetypes.py文件，路径位于python的安装路径下的Lib\mimetypes.py文件。在import下添加如下几行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if sys.getdefaultencoding() != &apos;gbk&apos;:</div><div class="line">    reload(sys)</div><div class="line">    sys.setdefaultencoding(&apos;gbk&apos;)</div></pre></td></tr></table></figure>
<p> 然后重复第二步操作，安装即可。</p>
<p><strong>注意：</strong><br>其实也可以直接执行第三步，直接修改mimetypes.py文件的信息，然后输入pip升级命令“python -m pip install -U pip”     </p>
<h4 id="2-安装过程中遇到的第二个问题："><a href="#2-安装过程中遇到的第二个问题：" class="headerlink" title="2.安装过程中遇到的第二个问题："></a>2.安装过程中遇到的第二个问题：</h4><p>Permission denied: ‘/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/dateutil’  </p>
<p>这里是因为权限问题，需要使用sudo安装，键入如下代码安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install flask-restful</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-使用-pip-安装-Flask-RESTful&quot;&gt;&lt;a href=&quot;#1-使用-pip-安装-Flask-RESTful&quot; class=&quot;headerlink&quot; title=&quot;1.使用 pip 安装 Flask-RESTful:&quot;&gt;&lt;/a&gt;1.使用 pip 安
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java关键字this的使用</title>
    <link href="http://suxianglun.github.io/2017/05/11/Java%E5%85%B3%E9%94%AE%E5%AD%97this%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://suxianglun.github.io/2017/05/11/Java关键字this的使用/</id>
    <published>2017-05-11T02:44:15.000Z</published>
    <updated>2017-05-24T07:11:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。"><a href="#1-成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。" class="headerlink" title="1.成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。"></a>1.成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  public class Hello &#123;</div><div class="line">   String s = &quot;Hello&quot;;</div><div class="line"></div><div class="line">   public Hello(String s) &#123;</div><div class="line">      System.out.println(&quot;s = &quot; + s);</div><div class="line">      System.out.println(&quot;1 -&gt; this.s = &quot; + this.s);</div><div class="line">      this.s = s;//把参数值赋给成员变量，成员变量的值改变</div><div class="line">      System.out.println(&quot;2 -&gt; this.s = &quot; + this.s);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">      Hello x = new Hello(&quot;HelloWorld!&quot;);</div><div class="line">      System.out.println(&quot;s=&quot; + x.s);//验证成员变量值的改变</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 结果为：</p>
<blockquote>
<p>s = HelloWorld!<br>   1 -&gt; this.s = Hello<br>   2 -&gt; this.s = HelloWorld!<br>   s=HelloWorld!     </p>
</blockquote>
<h4 id="2-把自己当作参数传递时，也可以用this-this作当前参数进行传递"><a href="#2-把自己当作参数传递时，也可以用this-this作当前参数进行传递" class="headerlink" title="2.把自己当作参数传递时，也可以用this.(this作当前参数进行传递)"></a>2.把自己当作参数传递时，也可以用this.(this作当前参数进行传递)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">    public A() &#123;</div><div class="line">       new B(this).print();// 调用B的方法</div><div class="line">    &#125;</div><div class="line">    public void print() &#123;</div><div class="line">       System.out.println(&quot;HelloAA from A!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class B &#123;</div><div class="line">    A a;</div><div class="line">    public B(A a) &#123;</div><div class="line">       this.a = a;</div><div class="line">    &#125;</div><div class="line">    public void print() &#123;</div><div class="line">       a.print();//调用A的方法</div><div class="line">       System.out.println(&quot;HelloAB from B!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">public class HelloA &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       A aaa = new A();</div><div class="line">       aaa.print();</div><div class="line">       B bbb = new B(aaa);</div><div class="line">       bbb.print();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果为：<br>HelloAA from A!<br>HelloAB from B!<br>HelloAA from A!<br>HelloAA from A!<br>HelloAB from B!</p>
</blockquote>
<h4 id="3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。"><a href="#3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。" class="headerlink" title="3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。"></a>3．有时候，我们会用到一些内部类和匿名类，如事件处理。当在匿名类中用this时，这个this则指的是匿名类或内部类本身。这时如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class HelloB &#123;</div><div class="line">    int i = 1;</div><div class="line"> </div><div class="line">    public HelloB() &#123;</div><div class="line">       Thread thread = new Thread() &#123;</div><div class="line">           public void run() &#123;</div><div class="line">              for (int j=0;j&lt;20;j++) &#123;</div><div class="line">                  HelloB.this.run();//调用外部类的方法</div><div class="line">                  try &#123;</div><div class="line">                     sleep(1000);</div><div class="line">                  &#125; catch (InterruptedException ie) &#123;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;; // 注意这里有分号</div><div class="line">       thread.start();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public void run() &#123;</div><div class="line">       System.out.println(&quot;i = &quot; + i);</div><div class="line">       i++;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">       new HelloB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>thread 是一个匿名类对象，在它的定义中，它的 run 函数里用到了外部类的 run 函数。这时由于函数同名，直接调用就不行了。这时有两种办法，一种就是把外部的 run 函数换一个名字，但这种办法对于一个开发到中途的应用来说是不可取的。那么就可以用这个例子中的办法用外部类的类名加上 this 引用来说明要调用的是外部类的方法 run。</p>
<h4 id="4-在构造函数中，调用本类的另一个构造函数。可以使用this调用"><a href="#4-在构造函数中，调用本类的另一个构造函数。可以使用this调用" class="headerlink" title="4.在构造函数中，调用本类的另一个构造函数。可以使用this调用"></a>4.在构造函数中，调用本类的另一个构造函数。可以使用this调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ThisTest &#123;</div><div class="line">    private int age;</div><div class="line">    private String str;</div><div class="line"> </div><div class="line">    ThisTest(String str) &#123;</div><div class="line">       this.str=str;</div><div class="line">       System.out.println(str);</div><div class="line">    &#125;</div><div class="line">    ThisTest(String str,int age) &#123;</div><div class="line">       this(str);</div><div class="line">       this.age=age;</div><div class="line">       System.out.println(age);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       ThisTest thistest = new ThisTest(&quot;this测试成功&quot;,25);</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>结果为：<br>this测试成功<br>25</p>
</blockquote>
<p><strong>值得注意的是：</strong><br>　　1：在构造函数中调用另一个构造函数，调用动作必须置于最起始的位置。<br>　　2：不能在构造函数以外的任何函数内调用构造函数。<br>　　3：在一个构造函数内只能调用一个构造函数。<br>　　4：不能通过this递归调用构造方法，即不能在一个构造方法中通过this直接或间接调用该构造方法本身。</p>
<h4 id="5．this同时传递多个参数。"><a href="#5．this同时传递多个参数。" class="headerlink" title="5．this同时传递多个参数。"></a>5．this同时传递多个参数。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class TestClass &#123;</div><div class="line">    int x;</div><div class="line">    int y;</div><div class="line"> </div><div class="line">    static void showtest(TestClass tc) &#123;//实例化对象</div><div class="line">       System.out.println(tc.x + &quot; &quot; + tc.y);</div><div class="line">    &#125;</div><div class="line">    void seeit() &#123;</div><div class="line">       showtest(this);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">       TestClass p = new TestClass();</div><div class="line">       p.x = 9;</div><div class="line">       p.y = 10;</div><div class="line">       p.seeit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-super和this的异同"><a href="#6-super和this的异同" class="headerlink" title="6.super和this的异同"></a>6.super和this的异同</h4><p>super在一个类中用来引用其父类的成员，它是在子类中访问父类成员的一个桥梁，并不是任何一个对象的引用，而this则表示当前类对象的引用。在代码中Object o = super;是错误的，Object o = this;则是允许的。<br>super关键字的作用在于当子类中覆盖了父类的某个成员变量，或者重写了父类的某个成员方法时还能够访问到父类的成员变量和成员方法。如果子类中没有重写父类的成员变量和成员方法，则子类会继承父类的所有非private的成员变量和成员方法。这时在子类中无论通过this来访问成员和通过super来访问成员，结果都是一样的。    </p>
<h4 id="super-getClass-和this-getClass"><a href="#super-getClass-和this-getClass" class="headerlink" title="super.getClass()和this.getClass()"></a>super.getClass()和this.getClass()</h4><p>getClass()是Object类定义的一个final方法，所有Java类的getClass()都继承自Object类。如前文所述，如果子类没有重写父类的某个成员方法，那么通过super来访问还是还是通过this来访问结果都是一样的。因此，super.getClass()和this.getClass()结果是一样的。Object类的getClass()方法返回的是该对象的运行时类，一个对象的运行时类是该对象通过new创建时指定的类。因此，super.getClass()和this.getClass()返回的都是new对象时指定的类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。&quot;&gt;&lt;a href=&quot;#1-成员变量和局部变量重名时，在方法中使用this时，this代表的是该方法所在类的成员变量。&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="Java" scheme="http://suxianglun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://suxianglun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《Python核心编程》学习笔记03（Python对象）</title>
    <link href="http://suxianglun.github.io/2017/05/05/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003%EF%BC%88Python%E5%AF%B9%E8%B1%A1%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/05/Python核心编程》学习笔记03（Python对象）/</id>
    <published>2017-05-05T08:52:32.000Z</published>
    <updated>2017-05-24T07:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-标准类型内建函数"><a href="#1-标准类型内建函数" class="headerlink" title="1.标准类型内建函数"></a>1.标准类型内建函数</h3><h4 id="1-type"><a href="#1-type" class="headerlink" title="1.type()"></a>1.type()</h4><p>type()接受一个对象参数，返回该对象的类型。它的返回值是一个对象的类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; type(4)     # int type    </div><div class="line">&lt;type &apos;int&apos;&gt;</div></pre></td></tr></table></figure>
<h4 id="2-cmp"><a href="#2-cmp" class="headerlink" title="2.cmp()"></a>2.cmp()</h4><p>内建函数cmp(obj1,obj2)用来比较两个对象obj1和obj2的大小，如果obj1比obj2小的话，返回负整数，如果obj1比obj2大的话，返回正整数，如果obj1等于obj2小的话，返回0，比较是在对象之间进行的，不管是标准类型对象还是用户自定 义对象。如果是用户自定义对象， cmp()会调用该类的特殊方法<strong>cmp</strong>()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a, b = -4, 12     </div><div class="line"></div><div class="line">&gt;&gt;&gt; cmp(a,b)     </div><div class="line">-1    </div><div class="line">&gt;&gt;&gt; cmp(b,a)  </div><div class="line">  1    </div><div class="line">&gt;&gt;&gt; b = -4    &gt;&gt;&gt; cmp(a,b)    0    &gt;&gt;&gt;    &gt;&gt;&gt; a, b = &apos;abc&apos;, &apos;xyz&apos;    &gt;&gt;&gt; cmp(a,b)    -23    &gt;&gt;&gt; cmp(b,a)    23    &gt;&gt;&gt; b = &apos;abc&apos;    &gt;&gt;&gt; cmp(a,b)    0</div></pre></td></tr></table></figure>
<h4 id="3-str-和-repr-及-运算符"><a href="#3-str-和-repr-及-运算符" class="headerlink" title="3.str()和 repr() (及 `` 运算符)"></a>3.str()和 repr() (及 `` 运算符)</h4><p>str()函数得到的字符串可读性好， 而 repr()函数得到的字符 串通常可以用来重新获得该对象, 通常情况下 obj == eval(repr(obj)) 这个等式是成立的。事实上 repr() 和 “” 做的 是完全一样的事情，它们返回的是一个对象的“官方”字符串表示，但 str()则有所不同。str() 致力 于生成一个对象的可读性好的字符串表示，它的返回结果通常无法用于 eval()求值， 但很适 合用于 print 语句输出。</p>
<h4 id="4-type-和-isinstance"><a href="#4-type-和-isinstance" class="headerlink" title="4.type() 和 isinstance()"></a>4.type() 和 isinstance()</h4><p>在Python中可以使用type()与isinstance()这两个函数判断对象类型，而isinstance()函数的使用上比type更加方便。区别就是 对于subclass之类的 type就不行了，所以,强烈建议不要使用type判断对象类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  class A:</div><div class="line">   pass</div><div class="line"></div><div class="line">class B(A):</div><div class="line">   pass</div><div class="line"></div><div class="line">isinstance(A(), A)  # returns True</div><div class="line">type(A()) == A      # returns True</div><div class="line">isinstance(B(), A)    # returns True</div><div class="line">type(B()) == A        # returns False</div></pre></td></tr></table></figure>
<h3 id="2-标准类型分布"><a href="#2-标准类型分布" class="headerlink" title="2.标准类型分布"></a>2.标准类型分布</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th style="text-align:right">存储模型</th>
<th style="text-align:center">更新模型</th>
<th style="text-align:center">访问模型</th>
</tr>
</thead>
<tbody>
<tr>
<td>数字</td>
<td style="text-align:right">标量</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">直接访问</td>
</tr>
<tr>
<td>字符串</td>
<td style="text-align:right">标量</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">顺序访问</td>
</tr>
<tr>
<td>列表</td>
<td style="text-align:right">容器</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">顺序访问</td>
</tr>
<tr>
<td>元祖</td>
<td style="text-align:right">容器</td>
<td style="text-align:center">不可变</td>
<td style="text-align:center">顺序访问</td>
</tr>
<tr>
<td>字典</td>
<td style="text-align:right">容器</td>
<td style="text-align:center">可变</td>
<td style="text-align:center">映射访问</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-标准类型内建函数&quot;&gt;&lt;a href=&quot;#1-标准类型内建函数&quot; class=&quot;headerlink&quot; title=&quot;1.标准类型内建函数&quot;&gt;&lt;/a&gt;1.标准类型内建函数&lt;/h3&gt;&lt;h4 id=&quot;1-type&quot;&gt;&lt;a href=&quot;#1-type&quot; class=&quot;
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python核心编程》学习笔记02（Python基础）</title>
    <link href="http://suxianglun.github.io/2017/05/05/%E3%80%8APython%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002%EF%BC%88Python%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/05/《Python核心编程》学习笔记02（Python基础）/</id>
    <published>2017-05-05T07:25:11.000Z</published>
    <updated>2017-05-24T07:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模块结构和布局"><a href="#1-模块结构和布局" class="headerlink" title="1.模块结构和布局"></a>1.模块结构和布局</h3><p>合理的布局结构应该如下：</p>
<blockquote>
<p>1、起始行：通常只有在类 Unix 环境下才使用起始行，有起始行就能够仅输入脚本名字来执行脚本，无需直接调用解释器。     </p>
<p>2、模块文档：简要介绍模块的功能及重要全局变量的含义,模块外可通过 module.<strong>doc</strong> 访问这些内容。    </p>
<p>3、模块导入：导入当前模块的代码需要的所有模块;每个模块仅导入一次(当前模块被加载时);函数<br>内部的模块导入代码不会被执行， 除非该函数正在执行。    </p>
<p>4、定义变量：这里定义的变量为全局变量，本模块中的所有函数都可直接使用。从好的编程风格角度说， 除非必须，否则就要尽量使用局部变量代替全局变量，如果坚持这样做，你的代码就不但容易<br>维护，而且还可以 高性能并节省内存。    </p>
<p>5、类定义语句：<br>所有的类都需要在这里定义。当模块被导入时 class 语句会被执行, 类也就会被定义。类 的文档变量是 class.<strong>doc</strong>。</p>
<p>6、方法语句：<br> 此处定义的函数可以通过 module.function()在外部被访问到，当模块被导入时 def 语句 会被执行， 函数也就都会定义好，函数的文档变量是 function.<strong>doc</strong>。</p>
<p>7、主程序：无论这个模块是被别的模块导入还是作为脚本直接执行，都会执行这部分代码。通常这里 不会有太多功能性代码，而是根据执行的模式调用不同的函数。</p>
</blockquote>
<h3 id="2-name-指示模块应如何被加载"><a href="#2-name-指示模块应如何被加载" class="headerlink" title="2. _ name _ 指示模块应如何被加载"></a>2. _ <em>name</em> _ 指示模块应如何被加载</h3><p>由于主程序代码无论模块是被导入还是被直接执行都会运行，我们必须知道模块如何决定 运行方向。一个应用程序可能需要导入另一个应用程序的一个模块，以便重用一些有用的代码 (否则就只能用拷贝粘贴那种非面向对象的愚蠢手段)。这种情况下，你只想访问那些位于其 它应用程序中的代码，而不是想运行那个应用程序。因此一个问题出现了，“Python 是否有 一种方法能在运行时检测该模块是被导入还是被直接执行呢?” 答案就是……(鼓声雷动)…..没错! <strong>name</strong> 系统变量就是正确答案。 </p>
<blockquote>
<p>如果模块是被导入， _ <em>name</em> <em> 的值为模块名字<br>如果模块是被直接执行， </em> <em>name</em> <em> 的值为 ‘</em> <em>main</em> _’    </p>
</blockquote>
<h3 id="3-变量和内存管理细节"><a href="#3-变量和内存管理细节" class="headerlink" title="3.变量和内存管理细节"></a>3.变量和内存管理细节</h3><p>主要包含以下几点：</p>
<blockquote>
<p>1、变量无须提前声明<br>2、变量无须制定类型类型<br>3、程序员无须关心内存管理<br>4、变量会被收回<br>5、del 语句能够直接释放资源</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-模块结构和布局&quot;&gt;&lt;a href=&quot;#1-模块结构和布局&quot; class=&quot;headerlink&quot; title=&quot;1.模块结构和布局&quot;&gt;&lt;/a&gt;1.模块结构和布局&lt;/h3&gt;&lt;p&gt;合理的布局结构应该如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、起始行：通常只
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>《Python核心编程》学习笔记01（Python起步）</title>
    <link href="http://suxianglun.github.io/2017/05/04/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%EF%BC%88Python%E8%B5%B7%E6%AD%A5%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/04/python核心编程学习笔记01（Python起步）/</id>
    <published>2017-05-04T05:52:13.000Z</published>
    <updated>2017-05-24T07:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-程序输出print语句及“HelloWorld-”"><a href="#1-程序输出print语句及“HelloWorld-”" class="headerlink" title="1.程序输出print语句及“HelloWorld!”"></a>1.程序输出print语句及“HelloWorld!”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; myString = &apos;Hello World!&apos; </div><div class="line">&gt;&gt;&gt; print myString</div><div class="line">  &apos;Hello World!&apos;</div><div class="line">&gt;&gt;&gt; myString</div><div class="line">  &apos;Hello World!&apos;</div></pre></td></tr></table></figure>
<h4 id="1-1-和-在print中的使用"><a href="#1-1-和-在print中的使用" class="headerlink" title="1.1._ 和 %在print中的使用"></a>1.1._ 和 %在print中的使用</h4><p>下划线(_)在解释器中有特别的含义，表示最后一个表达式的值。所以上面的代码执行之后， 下划线变量会包含字符串:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; _</div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<p>Python的print语句，与字符串格式运算符( %)结合使用，可实现字符串替换功能。%s 表示由一个字符串来替换，而%d 表示由一个整数来替换，另外一个很常用的就是%f。它表示由一个浮点数来替换。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print ‘%s is number %d !’ % (&apos;python&apos;, 1)</div><div class="line">python is number 1!</div></pre></td></tr></table></figure>
<h3 id="2-程序输入和内建函数raw-input"><a href="#2-程序输入和内建函数raw-input" class="headerlink" title="2.程序输入和内建函数raw_input()"></a>2.程序输入和内建函数raw_input()</h3><p>从用户那里得到数据输入的最容易的方法是使用 raw_input()内建函数。它读取标准输入，<br>并将读取到的数据赋值给指定的变量。     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user=raw_input(&apos;henter your name: &apos;)</div><div class="line">enter your name suxianglun</div></pre></td></tr></table></figure>
<p>内建函数 int()将数值字符串转换成整数值，这样才可以对它进行数学运算         </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num = raw_input(&apos;Now enter a number: &apos;)</div><div class="line">Now enter a number: 1024</div><div class="line">  &gt;&gt;&gt; print &apos;Doubling your number: %d&apos; % (int(num) * 2)</div><div class="line">  Doubling your number: 2048</div></pre></td></tr></table></figure>
<h3 id="3-使用help-函数获取帮助信息"><a href="#3-使用help-函数获取帮助信息" class="headerlink" title="3.使用help()函数获取帮助信息"></a>3.使用help()函数获取帮助信息</h3><p>help()在交互式解释器中获取帮助信息,在学习 Python 的过程中，如果需要得到一个生疏函数的帮助，只需要对它调用内建函数help()。通过用函数名作为 help()的参数就能得到相应的帮助信息,查看结束退出使用 ：wq进行退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; help(raw_input)</div><div class="line">Help on built-in function raw_input in module __builtin__:</div><div class="line">raw_input(...) raw_input([prompt]) -&gt; string</div></pre></td></tr></table></figure>
<h3 id="4-列表解析"><a href="#4-列表解析" class="headerlink" title="4. 列表解析"></a>4. 列表解析</h3><p>表示可以在一行中使用for循环将所得到的的值放在列表中     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; squared = [x ** 2 for x in range(4)]    </div><div class="line">   &gt;&gt;&gt; for i in squared:... print i0149</div></pre></td></tr></table></figure>
<p>列表解析可以做更复杂的事情    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;squared = [x ** 2 for x in range(8) if not x%2]</div><div class="line">&gt;&gt;&gt;for i in squared</div><div class="line">...print i</div><div class="line">0</div><div class="line">4</div><div class="line">16</div><div class="line">36</div></pre></td></tr></table></figure>
<h3 id="5-实用的函数"><a href="#5-实用的函数" class="headerlink" title="5.实用的函数"></a>5.实用的函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>dir([obj])</td>
<td>显示对象的属性，如果没有提供参数， 则显示全局变量的名字</td>
</tr>
<tr>
<td>help([obj])</td>
<td>以一种整齐美观的形式 显示对象的文档字符串， 如果没有提供任何参 数， 则会进入交互式帮助。   </td>
</tr>
<tr>
<td>int(obj)</td>
<td>将一个对象转换为整数    </td>
</tr>
<tr>
<td>len(obj)</td>
<td>返回对象的长度</td>
</tr>
<tr>
<td>open(fn, mode)</td>
<td>以 mode(‘r’ = 读， ‘w’= 写)方式打开一个文件名为 fn 的文件</td>
</tr>
<tr>
<td>range([[start,]stop[,step])</td>
<td>返回一个整数列表。起始值为 start, 结束值为 stop - 1; start 默认值为 0， step默认值为1。</td>
</tr>
<tr>
<td>raw_input(str)</td>
<td>等待用户输入一个字符串， 可以提供一个可选的参数 str 用作提示信 息。</td>
</tr>
<tr>
<td>str(obj)</td>
<td>将一个对象转换为字符串 </td>
</tr>
<tr>
<td>type(obj)</td>
<td>返回对象的类型(返回值本身是一个 type 对象!)</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-程序输出print语句及“HelloWorld-”&quot;&gt;&lt;a href=&quot;#1-程序输出print语句及“HelloWorld-”&quot; class=&quot;headerlink&quot; title=&quot;1.程序输出print语句及“HelloWorld!”&quot;&gt;&lt;/a&gt;1.程序输
    
    </summary>
    
      <category term="Python" scheme="http://suxianglun.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://suxianglun.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>URI和URL含义及其理解</title>
    <link href="http://suxianglun.github.io/2017/04/28/URL%E5%92%8CURI%E5%90%AB%E4%B9%89%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <id>http://suxianglun.github.io/2017/04/28/URL和URI含义及理解/</id>
    <published>2017-04-28T08:14:03.000Z</published>
    <updated>2017-05-24T07:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、URI和URL含义："><a href="#1、URI和URL含义：" class="headerlink" title="1、URI和URL含义："></a>1、URI和URL含义：</h4><p>在理解URL之前先来看一下什么是URI    </p>
<h5 id="1-1-什么是URI？"><a href="#1-1-什么是URI？" class="headerlink" title="1.1 什么是URI？"></a>1.1 什么是URI？</h5><p>简单点说：URI就是<strong>通用资源标志符</strong>，不理解是吧，我第一次听说也是不理解。<br>进一步说：网络上的一些资源（文档、图片、音频、视频、程序等）都是有一些通用资源标识（Universal Resource Identifier， URI）进行定位的。也就是说如果你想要在网络上找到特定的这些资源，只需知道他们的URI，就可以进行定位，从而找到他们。  </p>
<p>通常情况下URI由三部分组成：       </p>
<blockquote>
<p><strong>1、访问资源的命名机制</strong><br><strong>2、存放资源的主机名</strong><br><strong>3、资源自身的名称，由路径表示</strong>    </p>
</blockquote>
<p>如下面的URI：<br><a href="http://www.jianshu.com/writer#/notebooks/9212154http://" target="_blank" rel="external">http://www.jianshu.com/writer#/notebooks/9212154http://</a><br>可以这样解读：    </p>
<blockquote>
<p>1、以http机制访问资源<br>2、存在以www.jianshu.com为名的主机上<br>3、资源路径为notebooks/9212154http://     </p>
</blockquote>
<h5 id="1-2什么是URL"><a href="#1-2什么是URL" class="headerlink" title="1.2什么是URL"></a>1.2什么是URL</h5><p>URL是URI的子集，它是Uniform Resource Locator的缩写，统一资源定位符”。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<br>URL的格式由三部分组成：    </p>
<blockquote>
<p>①第一部分是协议(或称为服务方式)。<br>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。<br>③第三部分是主机资源的具体地址，如目录和文件名等。<br>第一部分和第二部分用“://”符号隔开，<br>第二部分和第三部分用“/”符号隔开。<br>第一部分和第二部分是不可缺少的，第三部分有时可以省略。   </p>
</blockquote>
<h3 id="2、URL和URI的区别"><a href="#2、URL和URI的区别" class="headerlink" title="2、URL和URI的区别"></a>2、URL和URI的区别</h3><blockquote>
<p>URI的定义是：统一资源标识符；<br>URL的定义是：统一资源定位符。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、URI和URL含义：&quot;&gt;&lt;a href=&quot;#1、URI和URL含义：&quot; class=&quot;headerlink&quot; title=&quot;1、URI和URL含义：&quot;&gt;&lt;/a&gt;1、URI和URL含义：&lt;/h4&gt;&lt;p&gt;在理解URL之前先来看一下什么是URI    &lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="Web" scheme="http://suxianglun.github.io/categories/Web/"/>
    
    
      <category term="Web" scheme="http://suxianglun.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>如何利用Hexo、GitHub pages从零开始创建个人博客</title>
    <link href="http://suxianglun.github.io/2017/04/19/howCreateMyBlog/"/>
    <id>http://suxianglun.github.io/2017/04/19/howCreateMyBlog/</id>
    <published>2017-04-19T01:19:42.000Z</published>
    <updated>2017-05-24T07:08:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不多说了，详情如下：</p>
<h3 id="一、系统环境配置："><a href="#一、系统环境配置：" class="headerlink" title="一、系统环境配置："></a>一、系统环境配置：</h3><p>要想利用Hexo、GitHub搭建个人博客，首先要安装Node.js、git：    </p>
<h4 id="1、Node-js安装："><a href="#1、Node-js安装：" class="headerlink" title="1、Node.js安装："></a>1、Node.js安装：</h4><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">下载Node.js</a>     </p>
<h4 id="或者通过如下命令安装："><a href="#或者通过如下命令安装：" class="headerlink" title="或者通过如下命令安装："></a>或者通过如下命令安装：</h4><blockquote>
<p>brew install node  #最新版的node.js的包中已经集成了npm包管理工具     </p>
</blockquote>
<h4 id="通过如下命令查看是否安装成功："><a href="#通过如下命令查看是否安装成功：" class="headerlink" title="通过如下命令查看是否安装成功："></a>通过如下命令查看是否安装成功：</h4><blockquote>
<p>node -v<br>npm -v</p>
</blockquote>
<h4 id="2、Git安装及配置："><a href="#2、Git安装及配置：" class="headerlink" title="2、Git安装及配置："></a>2、Git安装及配置：</h4><p><a href="https://git-scm.com/download/" target="_blank" rel="external">下载Git</a>  </p>
<h4 id="或者通过如下命令安装：-1"><a href="#或者通过如下命令安装：-1" class="headerlink" title="或者通过如下命令安装："></a>或者通过如下命令安装：</h4><blockquote>
<p>brew install git          #Mac电脑使用brew安装<br>sudo apt-get install git  #Ubuntu系统使用这条命令安装</p>
</blockquote>
<p>配置详见另外一篇博客： <a href="https://git-scm.com/download/" target="_blank" rel="external">git安装与配置</a>        </p>
<h4 id="3、Hexo安装："><a href="#3、Hexo安装：" class="headerlink" title="3、Hexo安装："></a>3、Hexo安装：</h4><blockquote>
<p>$ npm install hexo -g  #-g表示全局安装, npm默认为当前项目安装</p>
</blockquote>
<h4 id="如遇错误，请使用一下安装："><a href="#如遇错误，请使用一下安装：" class="headerlink" title="如遇错误，请使用一下安装："></a>如遇错误，请使用一下安装：</h4><blockquote>
<p>$ npm install hexo –no-optional</p>
</blockquote>
<h4 id="验证是否成功安装："><a href="#验证是否成功安装：" class="headerlink" title="验证是否成功安装："></a>验证是否成功安装：</h4><blockquote>
<p>$ hexo -v</p>
</blockquote>
<p>目前我用到的环境如下 ，出现类似如下环境说明hexo安装成功     </p>
<blockquote>
<p>hexo-cli: 1.0.2<br>os: Darwin 16.4.0 darwin x64<br>http_parser: 2.7.0<br>node: 6.10.0<br>v8: 5.1.281.93<br>uv: 1.9.1<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>icu: 58.2<br>modules: 48<br>openssl: 1.0.2k</p>
</blockquote>
<h4 id="创建博客的根目录并切换到更目录下："><a href="#创建博客的根目录并切换到更目录下：" class="headerlink" title="创建博客的根目录并切换到更目录下："></a>创建博客的根目录并切换到更目录下：</h4><blockquote>
<p>$ mkdir myblog<br>$ cd myblog</p>
</blockquote>
<h4 id="初始化myblog文件夹使其成为Hexo博客："><a href="#初始化myblog文件夹使其成为Hexo博客：" class="headerlink" title="初始化myblog文件夹使其成为Hexo博客："></a>初始化myblog文件夹使其成为Hexo博客：</h4><blockquote>
<p>$ hexo init</p>
</blockquote>
<h4 id="自动根据当前目录下文件-生成静态网页："><a href="#自动根据当前目录下文件-生成静态网页：" class="headerlink" title="自动根据当前目录下文件,生成静态网页："></a>自动根据当前目录下文件,生成静态网页：</h4><blockquote>
<p>$ hexo generate  </p>
</blockquote>
<h4 id="运行本地服务："><a href="#运行本地服务：" class="headerlink" title="运行本地服务："></a>运行本地服务：</h4><blockquote>
<p>$ hexo server         </p>
</blockquote>
<h4 id="有必要提下Hexo常用的几个命令："><a href="#有必要提下Hexo常用的几个命令：" class="headerlink" title="有必要提下Hexo常用的几个命令："></a>有必要提下Hexo常用的几个命令：</h4><blockquote>
<p>$ hexo new “postName” #新建文章<br>$ hexo new page “pageName” #新建页面<br>$ hexo generate (或者hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo server (或者hexo s) 启动本地web服务，用于博客的预览<br>$ hexo deploy (或者hexo d) 部署播客到远端（比如github, coding等平台）</p>
</blockquote>
<h4 id="常用简写："><a href="#常用简写：" class="headerlink" title="常用简写："></a>常用简写：</h4><blockquote>
<p>$ hexo n == hexo new<br>$ hexo g == hexo generate<br>$ hexo s == hexo server<br>$ hexo d == hexo deploy      </p>
</blockquote>
<h4 id="常用组合："><a href="#常用组合：" class="headerlink" title="常用组合："></a>常用组合：</h4><blockquote>
<p>$ hexo d -g #生成部署<br>$ hexo s -g #生成预览       </p>
</blockquote>
<p>通过hexo g生成静态文件和hexo s启动本地web服务后，现在我们打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可以看到一篇内置的blog了。看到后是不是感觉很有成就感？反正我是这么认为的。</p>
<h4 id="二、Hexo主题设置"><a href="#二、Hexo主题设置" class="headerlink" title="二、Hexo主题设置"></a>二、Hexo主题设置</h4><p>默认的主题是landscape，这里以主题yilia为例进行说明。<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo中文官网：下载主题、配置详解</a>    </p>
<h5 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h5><blockquote>
<p>$ hexo clean<br>$ git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia   </p>
</blockquote>
<h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5><blockquote>
<p>修改myblog目录下的_config.yml配置文件中的theme属性，将其设置为yilia。<br>并按照主题说明进行相关的配置，这点很重要，否则修改后的主题样式会有变化<br>例如：git clone <a href="https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题" target="_blank" rel="external">https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题</a><br>就需要在_config.yml配置文件添加如下内容：</p>
<h3 id="search插件基于-https-github-com-PaicHyperionDev-hexo-gt-generator-search"><a href="#search插件基于-https-github-com-PaicHyperionDev-hexo-gt-generator-search" class="headerlink" title="search插件基于 https://github.com/PaicHyperionDev/hexo-&gt;generator-search"></a>search插件基于 <a href="https://github.com/PaicHyperionDev/hexo-&gt;generator-search" target="_blank" rel="external">https://github.com/PaicHyperionDev/hexo-&gt;generator-search</a></h3><h3 id="使用说明请参考该repo"><a href="#使用说明请参考该repo" class="headerlink" title="使用说明请参考该repo"></a>使用说明请参考该repo</h3><p>search:<br> path: search.xml<br> field: all</p>
</blockquote>
<h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><blockquote>
<p>$ hexo g # 生成<br>$ hexo s # 启动本地web服务器</p>
</blockquote>
<h4 id="三、GitHub-Pages配置"><a href="#三、GitHub-Pages配置" class="headerlink" title="三、GitHub Pages配置"></a>三、GitHub Pages配置</h4><h4 id="1、注册、登录GitHub"><a href="#1、注册、登录GitHub" class="headerlink" title="1、注册、登录GitHub"></a>1、注册、登录GitHub</h4><p>github官网：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fch0a9kz7aj31kw0z7npd.jpg" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure>     </p>
<h4 id="2、创建项目仓库"><a href="#2、创建项目仓库" class="headerlink" title="2、创建项目仓库"></a>2、创建项目仓库</h4><p>注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan20163281.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure></p>
<h4 id="3、填写项目名"><a href="#3、填写项目名" class="headerlink" title="3、填写项目名"></a>3、填写项目名</h4><p>在Repository name中填写：<strong>Github账号名.github.io 必须这样填，否则会出错 例如我的账号为:allen,那么就必须填allen.github.io</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.pchou.info/assets/img/build-github-blog-page-02-img0.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure>     </p>
<h4 id="4、设置GitHub-pages"><a href="#4、设置GitHub-pages" class="headerlink" title="4、设置GitHub pages"></a>4、设置GitHub pages</h4><p>打开settings，有一个Github Pages 的设置，点击 source 中的本来的 None ，使其变成 master 分支，也就是作为部署github pages 的分支，然后点击 save。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://images2015.cnblogs.com/blog/903320/201701/903320-20170115212404385-1979000093.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure>     </p>
<h4 id="5、查看网址"><a href="#5、查看网址" class="headerlink" title="5、查看网址"></a>5、查看网址</h4><p>页面刷新之后，再看 github pages 设置框处，多了一行网址，就是你的 github pages 的网址了，点击进去就进入属于你自己的博客网址了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://images2015.cnblogs.com/blog/903320/201701/903320-20170115213630338-44375750.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure></p>
<h3 id="四、部署到GitHub-pages"><a href="#四、部署到GitHub-pages" class="headerlink" title="四、部署到GitHub pages"></a>四、部署到GitHub pages</h3><h4 id="1、修改-config-yml"><a href="#1、修改-config-yml" class="headerlink" title="1、修改_config.yml"></a>1、修改_config.yml</h4><p>千万要注意冒号：后边要留有空格      </p>
<p>基本设置      </p>
<blockquote>
<p>title: allen<br>subtitle: welcome to allen blog<br>description:<br>author: John Doe<br>language: zh-CN #语言<br>timezone:        #时区</p>
<p>URL<br>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child" target="_blank" rel="external">http://yoursite.com/child</a>‘ and root as ‘/child/‘    </p>
<p>url: <a href="http://suxianglun.github.io">http://suxianglun.github.io</a>  #用于绑定域名, 其他的不需要配置，即为GitHub pages生成的那个网址<br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:</p>
<p>Extensions<br>Plugins: <a href="https://hexo.io/plugins/" target="_blank" rel="external">https://hexo.io/plugins/</a><br>Themes: <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a><br>theme: hexo-theme-landfarz   #主题设置</p>
<p>Deployment<br>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a><br>deploy:   #部署, 发布在 GitHub 上面<br> type: git<br>  repo: git@github.com:suxianglun/suxianglun.github.io.git #GitHub 项目仓库<br>  branch: master</p>
</blockquote>
<h4 id="2、部署到GitHub-上"><a href="#2、部署到GitHub-上" class="headerlink" title="2、部署到GitHub 上"></a>2、部署到GitHub 上</h4><blockquote>
<p>$ hexo clean #清除<br>$ hexo g #生成<br>$ hexo d #部署 # 可与hexo g合并为 hexo d -g</p>
<p>$ hexo d 之后如果出现ERROR Deployer not found: Git,请键入如下命令</p>
<p>$ npm install hexo-deployer-git –save </p>
</blockquote>
<p>部署之后去查看GitHub pages那个网址<a href="http://suxianglun.github.io，有可能会出现" target="_blank" rel="external">http://suxianglun.github.io，有可能会出现</a>:<br>Your site is having problems building: unable to build page. Please try again later. 或者<br>Your page is having problems building: page build failed<br>同时也会收到github发来的page build failure的邮件，但是邮件中显示的错误信息和settings页面上的一样, 就这句话, 什么都没有, 没有任何错误提示.我就卡在这一天，后来用了好长时间来解决了。我分析的主要原因如下：<br>1、Hexo未进行构建html,即未执行hexo g,这个过程需要一段时间，构建好html后myblog根目录下完整目录应该如下：     </p>
<blockquote>
<p>README.md    db.json        package.json    scaffolds<br>   themes<br>_config.yml    node_modules    public        source</p>
</blockquote>
<p>2、Hexo 配置不正确，请严格按照要求进行配置</p>
<p>注意事项：<br>markdown标题标准写法写法需要在”#”和后面字符之间加一个空格<br>如果不加空格 有些引擎就解析不了    </p>
<p>另外说一下我的个人博客地址 <a href="https://suxianglun.github.io/">https://suxianglun.github.io/</a> 欢迎来骚扰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不
    
    </summary>
    
      <category term="Hexo" scheme="http://suxianglun.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://suxianglun.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android studio下JNI开发</title>
    <link href="http://suxianglun.github.io/2017/04/05/Android%20studio%E4%B8%8BJNI%E5%92%8CNDK%E5%BC%80%E5%8F%91/"/>
    <id>http://suxianglun.github.io/2017/04/05/Android studio下JNI和NDK开发/</id>
    <published>2017-04-05T03:11:48.000Z</published>
    <updated>2017-05-24T07:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载Ndk并配置"><a href="#1-下载Ndk并配置" class="headerlink" title="1.下载Ndk并配置"></a>1.下载Ndk并配置</h3><p>点菜单栏的File-&gt;ProjectStructure…-&gt;在打开的窗口中左侧选中SDKLocation-&gt;<br>在右侧Android NDK Location中填入NDK目录所在路径，如下图所示：  </p>
<p><img src="http://img.blog.csdn.net/20160516224637401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20160516224841000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="2-新建项目JniDemo"><a href="#2-新建项目JniDemo" class="headerlink" title="2. 新建项目JniDemo"></a>2. 新建项目JniDemo</h3><h4 id="1-新建类JniUtil-声明所需要的native方法：getJniAdd-int-a-int-b-代码如下"><a href="#1-新建类JniUtil-声明所需要的native方法：getJniAdd-int-a-int-b-代码如下" class="headerlink" title="1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:"></a>1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:</h4><pre><code>public class JniUtil {
        static {
        System.loadLibrary(&quot;JniUtil&quot;);
    }

    public static native int getJniAdd(int a, int b);
}
</code></pre><h4 id="2-生成Java文件中native方法相对应的jin层c代码接口"><a href="#2-生成Java文件中native方法相对应的jin层c代码接口" class="headerlink" title="2. 生成Java文件中native方法相对应的jin层c代码接口"></a>2. 生成Java文件中native方法相对应的jin层c代码接口</h4><p>在AS界面的Terminal窗口中执行命令：cd app/src/main/java<br>定位至java文件夹，然后再执行命令：javah -jni com.richsoft.jnidemo.JniUtil<br>注意”com.richsoft.jnidemo”是JniUtil所在的包名。<br>此时在app/src/main/java路径下生成了一个.h文件，如图：   </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-b3c868adb09b54b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<h4 id="3-新建jni文件夹"><a href="#3-新建jni文件夹" class="headerlink" title="3.新建jni文件夹"></a>3.新建jni文件夹</h4><p>app-&gt;new-&gt;Floder-&gt;JNI Folder,如下图： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-60b3d9612e7a94b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点击之后弹出选择框：   </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-451c550875c3dd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>点击finish之后，main文件夹下生成jni文件夹，如下图：  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-206d517c3250e22b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<h4 id="4-实现项目中声明的Native方法"><a href="#4-实现项目中声明的Native方法" class="headerlink" title="4.实现项目中声明的Native方法"></a>4.实现项目中声明的Native方法</h4><p>在jni目录下创建JniUtil.c文件,然后将com_richsoft_jnidemo_JniUtil.h中的方法拷贝至JniUtil.c中，并实现这个方法，如下代码：   </p>
<pre><code>#include&lt;jni.h&gt;
JNIEXPORT jint JNICALL Java_com_richsoft_jnidemo_JniUtil_getJniAdd
        (JNIEnv *env, jclass cls, jint a, jint b) {
    return a + b;
}
</code></pre><h3 id="3-编译-so文件"><a href="#3-编译-so文件" class="headerlink" title="3.编译.so文件"></a>3.编译.so文件</h3><h4 id="1-gradle内添加代码："><a href="#1-gradle内添加代码：" class="headerlink" title="1.gradle内添加代码："></a>1.gradle内添加代码：</h4><p>在gradle.properties文件末尾添加上“android.useDeprecatedNdk=true”<br>然后在app文件下build.grade－&gt;defaultConfig括号内添加如下代码：   </p>
<pre><code>ndk {
            moduleName &quot;JniUtil&quot;          //生成的so名字
            abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; ,&quot;x86&quot;//输出指定三种abi体系结构下的so库，目前可有可无。
        }
</code></pre><h4 id="2-build-项目"><a href="#2-build-项目" class="headerlink" title="2.build 项目"></a>2.build 项目</h4><p>点击Build下的Make Project,成功之后打开app-&gt;intermediates-&gt;ndk-&gt;debug发现了四个文件夹,如下图： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-24939b37659a4c28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>到此，生成.so文件的过程结束。<br>在src\main下新建jniLibs文件夹，将上面的四个文件夹拷贝至jniLibs文件夹下，如图：</p>
<p>将jni文件夹和.h文件删除，如下图：    </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-3fee35f92cf1bb2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>最后咱们试试生成的.so文件能不能用，贴下MainActivity代码：  </p>
<pre><code>public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        TextView tv = (TextView) findViewById(R.id.tv);
        tv.setText(&quot;java调用C语言实现的加法运算:2+1000=&quot; + JniUtil.getJniAdd(2, 10000));
    }
}
</code></pre><p>运行下程序，结果如下：    </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-a9a4e1f1bff2e324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-下载Ndk并配置&quot;&gt;&lt;a href=&quot;#1-下载Ndk并配置&quot; class=&quot;headerlink&quot; title=&quot;1.下载Ndk并配置&quot;&gt;&lt;/a&gt;1.下载Ndk并配置&lt;/h3&gt;&lt;p&gt;点菜单栏的File-&amp;gt;ProjectStructure…-&amp;gt;在打
    
    </summary>
    
      <category term="Android" scheme="http://suxianglun.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://suxianglun.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
