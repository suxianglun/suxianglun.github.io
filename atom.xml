<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苏湘伦的Blog</title>
  <subtitle>多谢大爷赏脸来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://suxianglun.github.io/"/>
  <updated>2017-05-04T08:07:20.000Z</updated>
  <id>http://suxianglun.github.io/</id>
  
  <author>
    <name>苏湘伦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Python核心编程》学习笔记01（Python起步）</title>
    <link href="http://suxianglun.github.io/2017/05/04/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001%EF%BC%88Python%E8%B5%B7%E6%AD%A5%EF%BC%89/"/>
    <id>http://suxianglun.github.io/2017/05/04/python核心编程学习笔记01（Python起步）/</id>
    <published>2017-05-04T05:52:13.000Z</published>
    <updated>2017-05-04T08:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-程序输出print语句及“HelloWorld-”"><a href="#1-程序输出print语句及“HelloWorld-”" class="headerlink" title="1.程序输出print语句及“HelloWorld!”"></a>1.程序输出print语句及“HelloWorld!”</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; myString = &apos;Hello World!&apos; </div><div class="line">&gt;&gt;&gt; print myString</div><div class="line">  &apos;Hello World!&apos;</div><div class="line">&gt;&gt;&gt; myString</div><div class="line">  &apos;Hello World!&apos;</div></pre></td></tr></table></figure>
<h4 id="1-1-和-在print中的使用"><a href="#1-1-和-在print中的使用" class="headerlink" title="1.1._ 和 %在print中的使用"></a>1.1._ 和 %在print中的使用</h4><p>下划线(_)在解释器中有特别的含义，表示最后一个表达式的值。所以上面的代码执行之后， 下划线变量会包含字符串:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; _</div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<p>Python的print语句，与字符串格式运算符( %)结合使用，可实现字符串替换功能。%s 表示由一个字符串来替换，而%d 表示由一个整数来替换，另外一个很常用的就是%f。它表示由一个浮点数来替换。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print ‘%s is number %d !’ % (&apos;python&apos;, 1)</div><div class="line">python is number 1!</div></pre></td></tr></table></figure>
<h3 id="2-程序输入和内建函数raw-input"><a href="#2-程序输入和内建函数raw-input" class="headerlink" title="2.程序输入和内建函数raw_input()"></a>2.程序输入和内建函数raw_input()</h3><p>从用户那里得到数据输入的最容易的方法是使用 raw_input()内建函数。它读取标准输入，<br>并将读取到的数据赋值给指定的变量。     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; user=raw_input(&apos;henter your name: &apos;)</div><div class="line">enter your name suxianglun</div></pre></td></tr></table></figure>
<p>内建函数 int()将数值字符串转换成整数值，这样才可以对它进行数学运算         </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num = raw_input(&apos;Now enter a number: &apos;)</div><div class="line">Now enter a number: 1024</div><div class="line">  &gt;&gt;&gt; print &apos;Doubling your number: %d&apos; % (int(num) * 2)</div><div class="line">  Doubling your number: 2048</div></pre></td></tr></table></figure>
<h3 id="3-使用help-函数获取帮助信息"><a href="#3-使用help-函数获取帮助信息" class="headerlink" title="3.使用help()函数获取帮助信息"></a>3.使用help()函数获取帮助信息</h3><p>help()在交互式解释器中获取帮助信息,在学习 Python 的过程中，如果需要得到一个生疏函数的帮助，只需要对它调用内建函数help()。通过用函数名作为 help()的参数就能得到相应的帮助信息,查看结束退出使用 ：wq进行退出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; help(raw_input)</div><div class="line">Help on built-in function raw_input in module __builtin__:</div><div class="line">raw_input(...) raw_input([prompt]) -&gt; string</div></pre></td></tr></table></figure>
<h3 id="4-列表解析"><a href="#4-列表解析" class="headerlink" title="4. 列表解析"></a>4. 列表解析</h3><p>表示可以在一行中使用for循环将所得到的的值放在列表中     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; squared = [x ** 2 for x in range(4)]    </div><div class="line">   &gt;&gt;&gt; for i in squared:... print i0149</div></pre></td></tr></table></figure>
<p>列表解析可以做更复杂的事情    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;squared = [x ** 2 for x in range(8) if not x%2]</div><div class="line">&gt;&gt;&gt;for i in squared</div><div class="line">...print i</div><div class="line">0</div><div class="line">4</div><div class="line">16</div><div class="line">36</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-程序输出print语句及“HelloWorld-”&quot;&gt;&lt;a href=&quot;#1-程序输出print语句及“HelloWorld-”&quot; class=&quot;headerlink&quot; title=&quot;1.程序输出print语句及“HelloWorld!”&quot;&gt;&lt;/a&gt;1.程序输
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>URI和URL含义及其理解</title>
    <link href="http://suxianglun.github.io/2017/04/28/URL%E5%92%8CURI%E5%90%AB%E4%B9%89%E5%8F%8A%E7%90%86%E8%A7%A3/"/>
    <id>http://suxianglun.github.io/2017/04/28/URL和URI含义及理解/</id>
    <published>2017-04-28T08:14:03.000Z</published>
    <updated>2017-04-28T08:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、URI和URL含义："><a href="#1、URI和URL含义：" class="headerlink" title="1、URI和URL含义："></a>1、URI和URL含义：</h4><p>在理解URL之前先来看一下什么是URI    </p>
<h5 id="1-1-什么是URI？"><a href="#1-1-什么是URI？" class="headerlink" title="1.1 什么是URI？"></a>1.1 什么是URI？</h5><p>简单点说：URI就是<strong>通用资源标志符</strong>，不理解是吧，我第一次听说也是不理解。<br>进一步说：网络上的一些资源（文档、图片、音频、视频、程序等）都是有一些通用资源标识（Universal Resource Identifier， URI）进行定位的。也就是说如果你想要在网络上找到特定的这些资源，只需知道他们的URI，就可以进行定位，从而找到他们。  </p>
<p>通常情况下URI由三部分组成：       </p>
<blockquote>
<p><strong>1、访问资源的命名机制</strong><br><strong>2、存放资源的主机名</strong><br><strong>3、资源自身的名称，由路径表示</strong>    </p>
</blockquote>
<p>如下面的URI：<br><a href="http://www.jianshu.com/writer#/notebooks/9212154http://" target="_blank" rel="external">http://www.jianshu.com/writer#/notebooks/9212154http://</a><br>可以这样解读：    </p>
<blockquote>
<p>1、以http机制访问资源<br>2、存在以www.jianshu.com为名的主机上<br>3、资源路径为notebooks/9212154http://     </p>
</blockquote>
<h5 id="1-2什么是URL"><a href="#1-2什么是URL" class="headerlink" title="1.2什么是URL"></a>1.2什么是URL</h5><p>URL是URI的子集，它是Uniform Resource Locator的缩写，统一资源定位符”。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<br>URL的格式由三部分组成：    </p>
<blockquote>
<p>①第一部分是协议(或称为服务方式)。<br>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。<br>③第三部分是主机资源的具体地址，如目录和文件名等。<br>第一部分和第二部分用“://”符号隔开，<br>第二部分和第三部分用“/”符号隔开。<br>第一部分和第二部分是不可缺少的，第三部分有时可以省略。   </p>
</blockquote>
<h3 id="2、URL和URI的区别"><a href="#2、URL和URI的区别" class="headerlink" title="2、URL和URI的区别"></a>2、URL和URI的区别</h3><blockquote>
<p>URI的定义是：统一资源标识符；<br>URL的定义是：统一资源定位符。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。<br>URI属于URL更低层次的抽象，一种字符串文本标准。<br>换句话说，URI属于父类，而URL属于URI的子类。URL是URI的一个子集。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、URI和URL含义：&quot;&gt;&lt;a href=&quot;#1、URI和URL含义：&quot; class=&quot;headerlink&quot; title=&quot;1、URI和URL含义：&quot;&gt;&lt;/a&gt;1、URI和URL含义：&lt;/h4&gt;&lt;p&gt;在理解URL之前先来看一下什么是URI    &lt;/p&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何利用Hexo、GitHub pages从零开始创建个人博客</title>
    <link href="http://suxianglun.github.io/2017/04/19/howCreateMyBlog/"/>
    <id>http://suxianglun.github.io/2017/04/19/howCreateMyBlog/</id>
    <published>2017-04-19T01:19:42.000Z</published>
    <updated>2017-04-28T08:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不多说了，详情如下：</p>
<h3 id="一、系统环境配置："><a href="#一、系统环境配置：" class="headerlink" title="一、系统环境配置："></a>一、系统环境配置：</h3><p>要想利用Hexo、GitHub搭建个人博客，首先要安装Node.js、git：    </p>
<h4 id="1、Node-js安装："><a href="#1、Node-js安装：" class="headerlink" title="1、Node.js安装："></a>1、Node.js安装：</h4><p><a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">下载Node.js</a>     </p>
<h4 id="或者通过如下命令安装："><a href="#或者通过如下命令安装：" class="headerlink" title="或者通过如下命令安装："></a>或者通过如下命令安装：</h4><blockquote>
<p>brew install node  #最新版的node.js的包中已经集成了npm包管理工具     </p>
</blockquote>
<h4 id="通过如下命令查看是否安装成功："><a href="#通过如下命令查看是否安装成功：" class="headerlink" title="通过如下命令查看是否安装成功："></a>通过如下命令查看是否安装成功：</h4><blockquote>
<p>node -v<br>npm -v</p>
</blockquote>
<h4 id="2、Git安装及配置："><a href="#2、Git安装及配置：" class="headerlink" title="2、Git安装及配置："></a>2、Git安装及配置：</h4><p><a href="https://git-scm.com/download/" target="_blank" rel="external">下载Git</a>  </p>
<h4 id="或者通过如下命令安装：-1"><a href="#或者通过如下命令安装：-1" class="headerlink" title="或者通过如下命令安装："></a>或者通过如下命令安装：</h4><blockquote>
<p>brew install git          #Mac电脑使用brew安装<br>sudo apt-get install git  #Ubuntu系统使用这条命令安装</p>
</blockquote>
<p>配置详见另外一篇博客： <a href="https://git-scm.com/download/" target="_blank" rel="external">git安装与配置</a>        </p>
<h4 id="3、Hexo安装："><a href="#3、Hexo安装：" class="headerlink" title="3、Hexo安装："></a>3、Hexo安装：</h4><blockquote>
<p>$ npm install hexo -g  #-g表示全局安装, npm默认为当前项目安装</p>
</blockquote>
<h4 id="如遇错误，请使用一下安装："><a href="#如遇错误，请使用一下安装：" class="headerlink" title="如遇错误，请使用一下安装："></a>如遇错误，请使用一下安装：</h4><blockquote>
<p>$ npm install hexo –no-optional</p>
</blockquote>
<h4 id="验证是否成功安装："><a href="#验证是否成功安装：" class="headerlink" title="验证是否成功安装："></a>验证是否成功安装：</h4><blockquote>
<p>$ hexo -v</p>
</blockquote>
<p>目前我用到的环境如下 ，出现类似如下环境说明hexo安装成功     </p>
<blockquote>
<p>hexo-cli: 1.0.2<br>os: Darwin 16.4.0 darwin x64<br>http_parser: 2.7.0<br>node: 6.10.0<br>v8: 5.1.281.93<br>uv: 1.9.1<br>zlib: 1.2.8<br>ares: 1.10.1-DEV<br>icu: 58.2<br>modules: 48<br>openssl: 1.0.2k</p>
</blockquote>
<h4 id="创建博客的根目录并切换到更目录下："><a href="#创建博客的根目录并切换到更目录下：" class="headerlink" title="创建博客的根目录并切换到更目录下："></a>创建博客的根目录并切换到更目录下：</h4><blockquote>
<p>$ mkdir myblog<br>$ cd myblog</p>
</blockquote>
<h4 id="初始化myblog文件夹使其成为Hexo博客："><a href="#初始化myblog文件夹使其成为Hexo博客：" class="headerlink" title="初始化myblog文件夹使其成为Hexo博客："></a>初始化myblog文件夹使其成为Hexo博客：</h4><blockquote>
<p>$ hexo init</p>
</blockquote>
<h4 id="自动根据当前目录下文件-生成静态网页："><a href="#自动根据当前目录下文件-生成静态网页：" class="headerlink" title="自动根据当前目录下文件,生成静态网页："></a>自动根据当前目录下文件,生成静态网页：</h4><blockquote>
<p>$ hexo generate  </p>
</blockquote>
<h4 id="运行本地服务："><a href="#运行本地服务：" class="headerlink" title="运行本地服务："></a>运行本地服务：</h4><blockquote>
<p>$ hexo server         </p>
</blockquote>
<h4 id="有必要提下Hexo常用的几个命令："><a href="#有必要提下Hexo常用的几个命令：" class="headerlink" title="有必要提下Hexo常用的几个命令："></a>有必要提下Hexo常用的几个命令：</h4><blockquote>
<p>$ hexo new “postName” #新建文章<br>$ hexo new page “pageName” #新建页面<br>$ hexo generate (或者hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>$ hexo server (或者hexo s) 启动本地web服务，用于博客的预览<br>$ hexo deploy (或者hexo d) 部署播客到远端（比如github, coding等平台）</p>
</blockquote>
<h4 id="常用简写："><a href="#常用简写：" class="headerlink" title="常用简写："></a>常用简写：</h4><blockquote>
<p>$ hexo n == hexo new<br>$ hexo g == hexo generate<br>$ hexo s == hexo server<br>$ hexo d == hexo deploy      </p>
</blockquote>
<h4 id="常用组合："><a href="#常用组合：" class="headerlink" title="常用组合："></a>常用组合：</h4><blockquote>
<p>$ hexo d -g #生成部署<br>$ hexo s -g #生成预览       </p>
</blockquote>
<p>通过hexo g生成静态文件和hexo s启动本地web服务后，现在我们打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可以看到一篇内置的blog了。看到后是不是感觉很有成就感？反正我是这么认为的。</p>
<h4 id="二、Hexo主题设置"><a href="#二、Hexo主题设置" class="headerlink" title="二、Hexo主题设置"></a>二、Hexo主题设置</h4><p>默认的主题是landscape，这里以主题yilia为例进行说明。<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo中文官网：下载主题、配置详解</a>    </p>
<h5 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h5><blockquote>
<p>$ hexo clean<br>$ git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia   </p>
</blockquote>
<h5 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h5><blockquote>
<p>修改myblog目录下的_config.yml配置文件中的theme属性，将其设置为yilia。<br>并按照主题说明进行相关的配置，这点很重要，否则修改后的主题样式会有变化<br>例如：git clone <a href="https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题" target="_blank" rel="external">https://github.com/GeekaholicLin/hexo-theme-ylion.git这个主题</a><br>就需要在_config.yml配置文件添加如下内容：</p>
<h3 id="search插件基于-https-github-com-PaicHyperionDev-hexo-gt-generator-search"><a href="#search插件基于-https-github-com-PaicHyperionDev-hexo-gt-generator-search" class="headerlink" title="search插件基于 https://github.com/PaicHyperionDev/hexo-&gt;generator-search"></a>search插件基于 <a href="https://github.com/PaicHyperionDev/hexo-&gt;generator-search" target="_blank" rel="external">https://github.com/PaicHyperionDev/hexo-&gt;generator-search</a></h3><h3 id="使用说明请参考该repo"><a href="#使用说明请参考该repo" class="headerlink" title="使用说明请参考该repo"></a>使用说明请参考该repo</h3><p>search:<br> path: search.xml<br> field: all</p>
</blockquote>
<h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><blockquote>
<p>$ hexo g # 生成<br>$ hexo s # 启动本地web服务器</p>
</blockquote>
<h4 id="三、GitHub-Pages配置"><a href="#三、GitHub-Pages配置" class="headerlink" title="三、GitHub Pages配置"></a>三、GitHub Pages配置</h4><h4 id="1、注册、登录GitHub"><a href="#1、注册、登录GitHub" class="headerlink" title="1、注册、登录GitHub"></a>1、注册、登录GitHub</h4><p>github官网：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fch0a9kz7aj31kw0z7npd.jpg" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure>     </p>
<h4 id="2、创建项目仓库"><a href="#2、创建项目仓库" class="headerlink" title="2、创建项目仓库"></a>2、创建项目仓库</h4><p>注册并登陆Github官网成功后，点击页面右上角的+，选择New repository。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://7xs5l8.com1.z0.glb.clouddn.com/wangzhan20163281.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure></p>
<h4 id="3、填写项目名"><a href="#3、填写项目名" class="headerlink" title="3、填写项目名"></a>3、填写项目名</h4><p>在Repository name中填写：<strong>Github账号名.github.io 必须这样填，否则会出错 例如我的账号为:allen,那么就必须填allen.github.io</strong><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.pchou.info/assets/img/build-github-blog-page-02-img0.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure>     </p>
<h4 id="4、设置GitHub-pages"><a href="#4、设置GitHub-pages" class="headerlink" title="4、设置GitHub pages"></a>4、设置GitHub pages</h4><p>打开settings，有一个Github Pages 的设置，点击 source 中的本来的 None ，使其变成 master 分支，也就是作为部署github pages 的分支，然后点击 save。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://images2015.cnblogs.com/blog/903320/201701/903320-20170115212404385-1979000093.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure>     </p>
<h4 id="5、查看网址"><a href="#5、查看网址" class="headerlink" title="5、查看网址"></a>5、查看网址</h4><p>页面刷新之后，再看 github pages 设置框处，多了一行网址，就是你的 github pages 的网址了，点击进去就进入属于你自己的博客网址了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://images2015.cnblogs.com/blog/903320/201701/903320-20170115213630338-44375750.png" alt="你值得拥有" title="">
                </div>
                <div class="image-caption">你值得拥有</div>
            </figure></p>
<h3 id="四、部署到GitHub-pages"><a href="#四、部署到GitHub-pages" class="headerlink" title="四、部署到GitHub pages"></a>四、部署到GitHub pages</h3><h4 id="1、修改-config-yml"><a href="#1、修改-config-yml" class="headerlink" title="1、修改_config.yml"></a>1、修改_config.yml</h4><p>千万要注意冒号：后边要留有空格      </p>
<p>基本设置      </p>
<blockquote>
<p>title: allen<br>subtitle: welcome to allen blog<br>description:<br>author: John Doe<br>language: zh-CN #语言<br>timezone:        #时区</p>
<p>URL<br>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child" target="_blank" rel="external">http://yoursite.com/child</a>‘ and root as ‘/child/‘    </p>
<p>url: <a href="http://suxianglun.github.io">http://suxianglun.github.io</a>  #用于绑定域名, 其他的不需要配置，即为GitHub pages生成的那个网址<br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:</p>
<p>Extensions<br>Plugins: <a href="https://hexo.io/plugins/" target="_blank" rel="external">https://hexo.io/plugins/</a><br>Themes: <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a><br>theme: hexo-theme-landfarz   #主题设置</p>
<p>Deployment<br>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a><br>deploy:   #部署, 发布在 GitHub 上面<br> type: git<br>  repo: git@github.com:suxianglun/suxianglun.github.io.git #GitHub 项目仓库<br>  branch: master</p>
</blockquote>
<h4 id="2、部署到GitHub-上"><a href="#2、部署到GitHub-上" class="headerlink" title="2、部署到GitHub 上"></a>2、部署到GitHub 上</h4><blockquote>
<p>$ hexo clean #清除<br>$ hexo g #生成<br>$ hexo d #部署 # 可与hexo g合并为 hexo d -g</p>
<p>$ hexo d 之后如果出现ERROR Deployer not found: Git,请键入如下命令</p>
<p>$ npm install hexo-deployer-git –save </p>
</blockquote>
<p>部署之后去查看GitHub pages那个网址<a href="http://suxianglun.github.io，有可能会出现" target="_blank" rel="external">http://suxianglun.github.io，有可能会出现</a>:<br>Your site is having problems building: unable to build page. Please try again later. 或者<br>Your page is having problems building: page build failed<br>同时也会收到github发来的page build failure的邮件，但是邮件中显示的错误信息和settings页面上的一样, 就这句话, 什么都没有, 没有任何错误提示.我就卡在这一天，后来用了好长时间来解决了。我分析的主要原因如下：<br>1、Hexo未进行构建html,即未执行hexo g,这个过程需要一段时间，构建好html后myblog根目录下完整目录应该如下：     </p>
<blockquote>
<p>README.md    db.json        package.json    scaffolds<br>   themes<br>_config.yml    node_modules    public        source</p>
</blockquote>
<p>2、Hexo 配置不正确，请严格按照要求进行配置</p>
<p>注意事项：<br>markdown标题标准写法写法需要在”#”和后面字符之间加一个空格<br>如果不加空格 有些引擎就解析不了    </p>
<p>另外说一下我的个人博客地址 <a href="https://suxianglun.github.io/">https://suxianglun.github.io/</a> 欢迎来骚扰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从搭建到成功以及本文的诞生，前后花了两天时间，真是一把辛酸泪，感觉还是挺费事的，中途一度想放弃，可还是咬牙坚持下来了，但看到结果后感觉一切的辛苦都是值得的。过程中一定要有耐心，毕竟需要用到的东西挺多的，比如：node.js、git、 github、hexo其中的知识。废话不
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android studio下JNI开发</title>
    <link href="http://suxianglun.github.io/2017/04/05/Android%20studio%E4%B8%8BJNI%E5%92%8CNDK%E5%BC%80%E5%8F%91/"/>
    <id>http://suxianglun.github.io/2017/04/05/Android studio下JNI和NDK开发/</id>
    <published>2017-04-05T03:11:48.000Z</published>
    <updated>2017-04-28T02:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载Ndk并配置"><a href="#1-下载Ndk并配置" class="headerlink" title="1.下载Ndk并配置"></a>1.下载Ndk并配置</h3><p>点菜单栏的File-&gt;ProjectStructure…-&gt;在打开的窗口中左侧选中SDKLocation-&gt;<br>在右侧Android NDK Location中填入NDK目录所在路径，如下图所示：  </p>
<p><img src="http://img.blog.csdn.net/20160516224637401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><img src="http://img.blog.csdn.net/20160516224841000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="2-新建项目JniDemo"><a href="#2-新建项目JniDemo" class="headerlink" title="2. 新建项目JniDemo"></a>2. 新建项目JniDemo</h3><h4 id="1-新建类JniUtil-声明所需要的native方法：getJniAdd-int-a-int-b-代码如下"><a href="#1-新建类JniUtil-声明所需要的native方法：getJniAdd-int-a-int-b-代码如下" class="headerlink" title="1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:"></a>1. 新建类JniUtil,声明所需要的native方法：getJniAdd(int a,int b),代码如下:</h4><pre><code>public class JniUtil {
        static {
        System.loadLibrary(&quot;JniUtil&quot;);
    }

    public static native int getJniAdd(int a, int b);
}
</code></pre><h4 id="2-生成Java文件中native方法相对应的jin层c代码接口"><a href="#2-生成Java文件中native方法相对应的jin层c代码接口" class="headerlink" title="2. 生成Java文件中native方法相对应的jin层c代码接口"></a>2. 生成Java文件中native方法相对应的jin层c代码接口</h4><p>在AS界面的Terminal窗口中执行命令：cd app/src/main/java<br>定位至java文件夹，然后再执行命令：javah -jni com.richsoft.jnidemo.JniUtil<br>注意”com.richsoft.jnidemo”是JniUtil所在的包名。<br>此时在app/src/main/java路径下生成了一个.h文件，如图：   </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-b3c868adb09b54b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<h4 id="3-新建jni文件夹"><a href="#3-新建jni文件夹" class="headerlink" title="3.新建jni文件夹"></a>3.新建jni文件夹</h4><p>app-&gt;new-&gt;Floder-&gt;JNI Folder,如下图： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-60b3d9612e7a94b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>点击之后弹出选择框：   </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-451c550875c3dd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>点击finish之后，main文件夹下生成jni文件夹，如下图：  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-206d517c3250e22b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<h4 id="4-实现项目中声明的Native方法"><a href="#4-实现项目中声明的Native方法" class="headerlink" title="4.实现项目中声明的Native方法"></a>4.实现项目中声明的Native方法</h4><p>在jni目录下创建JniUtil.c文件,然后将com_richsoft_jnidemo_JniUtil.h中的方法拷贝至JniUtil.c中，并实现这个方法，如下代码：   </p>
<pre><code>#include&lt;jni.h&gt;
JNIEXPORT jint JNICALL Java_com_richsoft_jnidemo_JniUtil_getJniAdd
        (JNIEnv *env, jclass cls, jint a, jint b) {
    return a + b;
}
</code></pre><h3 id="3-编译-so文件"><a href="#3-编译-so文件" class="headerlink" title="3.编译.so文件"></a>3.编译.so文件</h3><h4 id="1-gradle内添加代码："><a href="#1-gradle内添加代码：" class="headerlink" title="1.gradle内添加代码："></a>1.gradle内添加代码：</h4><p>在gradle.properties文件末尾添加上“android.useDeprecatedNdk=true”<br>然后在app文件下build.grade－&gt;defaultConfig括号内添加如下代码：   </p>
<pre><code>ndk {
            moduleName &quot;JniUtil&quot;          //生成的so名字
            abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot; ,&quot;x86&quot;//输出指定三种abi体系结构下的so库，目前可有可无。
        }
</code></pre><h4 id="2-build-项目"><a href="#2-build-项目" class="headerlink" title="2.build 项目"></a>2.build 项目</h4><p>点击Build下的Make Project,成功之后打开app-&gt;intermediates-&gt;ndk-&gt;debug发现了四个文件夹,如下图： </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-24939b37659a4c28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>到此，生成.so文件的过程结束。<br>在src\main下新建jniLibs文件夹，将上面的四个文件夹拷贝至jniLibs文件夹下，如图：</p>
<p>将jni文件夹和.h文件删除，如下图：    </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-3fee35f92cf1bb2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
<p>最后咱们试试生成的.so文件能不能用，贴下MainActivity代码：  </p>
<pre><code>public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        TextView tv = (TextView) findViewById(R.id.tv);
        tv.setText(&quot;java调用C语言实现的加法运算:2+1000=&quot; + JniUtil.getJniAdd(2, 10000));
    }
}
</code></pre><p>运行下程序，结果如下：    </p>
<p><img src="http://upload-images.jianshu.io/upload_images/4260213-a9a4e1f1bff2e324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-下载Ndk并配置&quot;&gt;&lt;a href=&quot;#1-下载Ndk并配置&quot; class=&quot;headerlink&quot; title=&quot;1.下载Ndk并配置&quot;&gt;&lt;/a&gt;1.下载Ndk并配置&lt;/h3&gt;&lt;p&gt;点菜单栏的File-&amp;gt;ProjectStructure…-&amp;gt;在打
    
    </summary>
    
    
  </entry>
  
</feed>
